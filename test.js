// Generated by Haxe 4.1.0-rc.1
(function ($hx_exports, $global) { "use strict";
$hx_exports["stx"] = $hx_exports["stx"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.escape = function(s) {
	return s.replace(EReg.escapeRe,"\\$&");
};
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var EnumValue = {};
EnumValue.match = function(this1,pattern) {
	return false;
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) {
			i = 0;
		}
	}
	while(i < len) {
		if(((a[i]) === obj)) {
			return i;
		}
		++i;
	}
	return -1;
};
HxOverrides.lastIndexOf = function(a,obj,i) {
	var len = a.length;
	if(i >= len) {
		i = len - 1;
	} else if(i < 0) {
		i += len;
	}
	while(i >= 0) {
		if(((a[i]) === obj)) {
			return i;
		}
		--i;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
HxOverrides.keyValueIter = function(a) {
	return new haxe_iterators_ArrayKeyValueIterator(a);
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
Lambda.map = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(x1));
	}
	return l;
};
Lambda.mapi = function(it,f) {
	var l = new haxe_ds_List();
	var i = 0;
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(i++,x1));
	}
	return l;
};
Lambda.flatten = function(it) {
	var l = new haxe_ds_List();
	var e = $getIterator(it);
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $getIterator(e1);
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(x1);
		}
	}
	return l;
};
Lambda.flatMap = function(it,f) {
	return Lambda.flatten(Lambda.map(it,f));
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			l.add(x1);
		}
	}
	return l;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Lambda.concat = function(a,b) {
	var l = new haxe_ds_List();
	var x = $getIterator(a);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(x1);
	}
	var x = $getIterator(b);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(x1);
	}
	return l;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.is = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.isOfType = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.downcast = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
Std.instance = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.int = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCodePoint(c);
	}
	,addSub: function(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
	,__properties__: {get_length:"get_length"}
};
var haxe_SysTools = function() { };
$hxClasses["haxe.SysTools"] = haxe_SysTools;
haxe_SysTools.__name__ = "haxe.SysTools";
haxe_SysTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	}
	if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	}
	return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
};
haxe_SysTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument)) {
		var result_b = "";
		var needquote = argument.indexOf(" ") != -1 || argument.indexOf("\t") != -1 || argument == "";
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += bs == null ? "null" : "" + bs;
					result_b += bs == null ? "null" : "" + bs;
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b = "";
		var _g = 0;
		var _g1 = argument.length;
		while(_g < _g1) {
			var i = _g++;
			var c = HxOverrides.cca(argument,i);
			if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
				result_b += String.fromCodePoint(94);
			}
			result_b += String.fromCodePoint(c);
		}
		return result_b;
	} else {
		return argument;
	}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.contains = function(s,value) {
	return s.indexOf(value) != -1;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.iterator = function(s) {
	return new haxe_iterators_StringIterator(s);
};
StringTools.keyValueIterator = function(s) {
	return new haxe_iterators_StringKeyValueIterator(s);
};
StringTools.isEof = function(c) {
	return c != c;
};
StringTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	} else if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	} else {
		return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
	}
};
StringTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	var argument1 = argument;
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument1)) {
		var result_b = "";
		var needquote = argument1.indexOf(" ") != -1 || argument1.indexOf("\t") != -1 || argument1 == "";
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument1,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += Std.string(bs);
					result_b += Std.string(bs);
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument1 = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b = "";
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var c = HxOverrides.cca(argument1,i);
			if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
				result_b += String.fromCodePoint(94);
			}
			result_b += String.fromCodePoint(c);
		}
		return result_b;
	} else {
		return argument1;
	}
};
StringTools.utf16CodePointAt = function(s,index) {
	var c = s.charCodeAt(index);
	if(c >= 55296 && c <= 56319) {
		c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
	}
	return c;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getClass = function(o) {
	return js_Boot.getClass(o);
};
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	return c.__name__;
};
Type.getEnumName = function(e) {
	return e.__ename__;
};
Type.resolveClass = function(name) {
	return $hxClasses[name];
};
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEmptyInstance = function(cl) {
	return Object.create(cl.prototype);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return $hxEnums[e.__enum__].__constructs__[e._hx_index];
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
Type.enumIndex = function(e) {
	return e._hx_index;
};
Type.allEnums = function(e) {
	return e.__empty_constructs__.slice();
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
var haxe_CallStack = {};
haxe_CallStack.__properties__ = {get_length:"get_length"};
haxe_CallStack.get_length = function(this1) {
	return this1.length;
};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function() {
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.copy = function(this1) {
	return this1.slice();
};
haxe_CallStack.get = function(this1,index) {
	return this1[index];
};
haxe_CallStack.asArray = function(this1) {
	return this1;
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m1 = item1.m;
				var m2 = item2.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item11 = item1.s;
				var file1 = item1.file;
				var line1 = item1.line;
				var col1 = item1.column;
				var col2 = item2.column;
				var line2 = item2.line;
				var file2 = item2.file;
				var item21 = item2.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class1 = item1.classname;
				var method1 = item1.method;
				var method2 = item2.method;
				var class2 = item2.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v1 = item1.v;
				var v2 = item2.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.exceptionToString = function(e) {
	if(e.get_previous() == null) {
		var tmp = "Exception: " + e.get_message();
		var tmp1 = e.get_stack();
		return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
	}
	var result = "";
	var e1 = e;
	var prev = null;
	while(e1 != null) {
		if(prev == null) {
			var result1 = "Exception: " + e1.get_message();
			var tmp = e1.get_stack();
			result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
		} else {
			var prevStack = haxe_CallStack.subtract(e1.get_stack(),prev.get_stack());
			result = "Exception: " + e1.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
		}
		prev = e1;
		e1 = e1.get_previous();
	}
	return result;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,toString: null
	,clear: null
	,__class__: haxe_IMap
};
var haxe_DynamicAccess = {};
haxe_DynamicAccess._new = function() {
	var this1 = { };
	return this1;
};
haxe_DynamicAccess.get = function(this1,key) {
	return this1[key];
};
haxe_DynamicAccess.set = function(this1,key,value) {
	return this1[key] = value;
};
haxe_DynamicAccess.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
haxe_DynamicAccess.remove = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
haxe_DynamicAccess.keys = function(this1) {
	return Reflect.fields(this1);
};
haxe_DynamicAccess.copy = function(this1) {
	return Reflect.copy(this1);
};
haxe_DynamicAccess.iterator = function(this1) {
	return new haxe_iterators_DynamicAccessIterator(this1);
};
haxe_DynamicAccess.keyValueIterator = function(this1) {
	return new haxe_iterators_DynamicAccessKeyValueIterator(this1);
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,details: function() {
		if(this.get_previous() == null) {
			var tmp = "Exception: " + this.get_message();
			var tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			var result = "";
			var e = this;
			var prev = null;
			while(e != null) {
				if(prev == null) {
					var result1 = "Exception: " + e.get_message();
					var tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					var prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_previous: function() {
		return this.__previousException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,get___exceptionStack: function() {
		return this.__exceptionStack;
	}
	,set___exceptionStack: function(value) {
		this.setProperty("__exceptionStack",value);
		return value;
	}
	,get___skipStack: function() {
		return this.__skipStack;
	}
	,set___skipStack: function(value) {
		this.setProperty("__skipStack",value);
		return value;
	}
	,get___nativeException: function() {
		return this.__nativeException;
	}
	,set___nativeException: function(value) {
		this.setProperty("__nativeException",value);
		return value;
	}
	,get___previousException: function() {
		return this.__previousException;
	}
	,set___previousException: function(value) {
		this.setProperty("__previousException",value);
		return value;
	}
	,__class__: haxe_Exception
	,__properties__: {set___exceptionStack:"set___exceptionStack",get___exceptionStack:"get___exceptionStack",get_native:"get_native",get_previous:"get_previous",get_stack:"get_stack",get_message:"get_message"}
});
var haxe_Int32 = {};
haxe_Int32.negate = function(this1) {
	return ~this1 + 1 | 0;
};
haxe_Int32.preIncrement = function(this1) {
	this1 = ++this1 | 0;
	return this1;
};
haxe_Int32.postIncrement = function(this1) {
	var ret = this1++;
	this1 |= 0;
	return ret;
};
haxe_Int32.preDecrement = function(this1) {
	this1 = --this1 | 0;
	return this1;
};
haxe_Int32.postDecrement = function(this1) {
	var ret = this1--;
	this1 |= 0;
	return ret;
};
haxe_Int32.add = function(a,b) {
	return a + b | 0;
};
haxe_Int32.addInt = function(a,b) {
	return a + b | 0;
};
haxe_Int32.sub = function(a,b) {
	return a - b | 0;
};
haxe_Int32.subInt = function(a,b) {
	return a - b | 0;
};
haxe_Int32.intSub = function(a,b) {
	return a - b | 0;
};
haxe_Int32.mul = function(a,b) {
	return haxe_Int32._mul(a,b);
};
haxe_Int32.mulInt = function(a,b) {
	return haxe_Int32._mul(a,b);
};
haxe_Int32.toFloat = function(this1) {
	return this1;
};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
haxe_Int32.clamp = function(x) {
	return x | 0;
};
var haxe_Int64 = {};
haxe_Int64.__properties__ = {get_low:"get_low",get_high:"get_high"};
haxe_Int64._new = function(x) {
	var this1 = x;
	return this1;
};
haxe_Int64.copy = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	return this2;
};
haxe_Int64.make = function(high,low) {
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.ofInt = function(x) {
	var this1 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
	return this1;
};
haxe_Int64.toInt = function(x) {
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	return x.low;
};
haxe_Int64.is = function(val) {
	return ((val) instanceof haxe__$Int64__$_$_$Int64);
};
haxe_Int64.isInt64 = function(val) {
	return ((val) instanceof haxe__$Int64__$_$_$Int64);
};
haxe_Int64.getHigh = function(x) {
	return x.high;
};
haxe_Int64.getLow = function(x) {
	return x.low;
};
haxe_Int64.isNeg = function(x) {
	return x.high < 0;
};
haxe_Int64.isZero = function(x) {
	var b_high = 0;
	var b_low = 0;
	if(x.high == b_high) {
		return x.low == b_low;
	} else {
		return false;
	}
};
haxe_Int64.compare = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	if(a.high < 0) {
		if(b.high < 0) {
			return v;
		} else {
			return -1;
		}
	} else if(b.high >= 0) {
		return v;
	} else {
		return 1;
	}
};
haxe_Int64.ucompare = function(a,b) {
	var v = haxe_Int32.ucompare(a.high,b.high);
	if(v != 0) {
		return v;
	} else {
		return haxe_Int32.ucompare(a.low,b.low);
	}
};
haxe_Int64.toStr = function(x) {
	return haxe_Int64.toString(x);
};
haxe_Int64.toString = function(this1) {
	var i = this1;
	var b_high = 0;
	var b_low = 0;
	if(i.high == b_high && i.low == b_low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,10);
	var ten = this1;
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(i.high != b_high || i.low != b_low)) {
			break;
		}
		var r = haxe_Int64.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = ~x.low + 1 | 0;
			if(low == 0) {
				var ret = high++;
				high = high | 0;
			}
			var this_high = high;
			var this_low = low;
			str = this_low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = ~x1.low + 1 | 0;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			var this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
			i = this1;
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe_Int64.parseString = function(sParam) {
	return haxe_Int64Helper.parseString(sParam);
};
haxe_Int64.fromFloat = function(f) {
	return haxe_Int64Helper.fromFloat(f);
};
haxe_Int64.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw haxe_Exception.thrown("divide by zero");
		case 1:
			var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			var this2 = new haxe__$Int64__$_$_$Int64(0,0);
			return { quotient : this1, modulus : this2};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
		modulus = this1;
	}
	if(divisor.high < 0) {
		var high = ~divisor.high;
		var low = ~divisor.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		divisor = this1;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var quotient = this1;
	var this1 = new haxe__$Int64__$_$_$Int64(0,1);
	var mask = this1;
	while(!(divisor.high < 0)) {
		var v = haxe_Int32.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this1;
		} else if(b < 32) {
			var this2 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
			divisor = this2;
		} else {
			var this3 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
			divisor = this3;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this4 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this4;
		} else if(b1 < 32) {
			var this5 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
			mask = this5;
		} else {
			var this6 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
			mask = this6;
		}
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v = haxe_Int32.ucompare(modulus.high,divisor.high);
		if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			quotient = this1;
			var high = modulus.high - divisor.high | 0;
			var low = modulus.low - divisor.low | 0;
			if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
				var ret = high--;
				high = high | 0;
			}
			var this2 = new haxe__$Int64__$_$_$Int64(high,low);
			modulus = this2;
		}
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this3 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this3;
		} else if(b < 32) {
			var this4 = new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b);
			mask = this4;
		} else {
			var this5 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
			mask = this5;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this6 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this6;
		} else if(b1 < 32) {
			var this7 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1);
			divisor = this7;
		} else {
			var this8 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
			divisor = this8;
		}
	}
	if(divSign) {
		var high = ~quotient.high;
		var low = ~quotient.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		quotient = this1;
	}
	if(dividend.high < 0) {
		var high = ~modulus.high;
		var low = ~modulus.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this1;
	}
	return { quotient : quotient, modulus : modulus};
};
haxe_Int64.neg = function(x) {
	var high = ~x.high;
	var low = ~x.low + 1 | 0;
	if(low == 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.preIncrement = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	var ret = this1.low++;
	this1.low = this1.low | 0;
	if(this1.low == 0) {
		var ret = this1.high++;
		this1.high = this1.high | 0;
	}
	return this1;
};
haxe_Int64.postIncrement = function(this1) {
	var ret = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	var ret1 = this1.low++;
	this1.low = this1.low | 0;
	if(this1.low == 0) {
		var ret1 = this1.high++;
		this1.high = this1.high | 0;
	}
	return ret;
};
haxe_Int64.preDecrement = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	if(this1.low == 0) {
		var ret = this1.high--;
		this1.high = this1.high | 0;
	}
	var ret = this1.low--;
	this1.low = this1.low | 0;
	return this1;
};
haxe_Int64.postDecrement = function(this1) {
	var ret = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	if(this1.low == 0) {
		var ret1 = this1.high--;
		this1.high = this1.high | 0;
	}
	var ret1 = this1.low--;
	this1.low = this1.low | 0;
	return ret;
};
haxe_Int64.add = function(a,b) {
	var high = a.high + b.high | 0;
	var low = a.low + b.low | 0;
	if(haxe_Int32.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.addInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var high = a.high + b_high | 0;
	var low = a.low + b_low | 0;
	if(haxe_Int32.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.sub = function(a,b) {
	var high = a.high - b.high | 0;
	var low = a.low - b.low | 0;
	if(haxe_Int32.ucompare(a.low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.subInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var high = a.high - b_high | 0;
	var low = a.low - b_low | 0;
	if(haxe_Int32.ucompare(a.low,b_low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.intSub = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var high = a_high - b.high | 0;
	var low = a_low - b.low | 0;
	if(haxe_Int32.ucompare(a_low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.mul = function(a,b) {
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b.low & mask;
	var bh = b.low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a.low,b.high) + haxe_Int32._mul(a.high,b.low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.mulInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a.low,b_high) + haxe_Int32._mul(a.high,b_low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe_Int64.div = function(a,b) {
	return haxe_Int64.divMod(a,b).quotient;
};
haxe_Int64.divInt = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
	return haxe_Int64.divMod(a,this1).quotient;
};
haxe_Int64.intDiv = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
	var x = haxe_Int64.divMod(this1,b).quotient;
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	var x1 = x.low;
	var this1 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this1;
};
haxe_Int64.mod = function(a,b) {
	return haxe_Int64.divMod(a,b).modulus;
};
haxe_Int64.modInt = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
	var x = haxe_Int64.divMod(a,this1).modulus;
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	var x1 = x.low;
	var this1 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this1;
};
haxe_Int64.intMod = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
	var x = haxe_Int64.divMod(this1,b).modulus;
	if(x.high != x.low >> 31) {
		throw haxe_Exception.thrown("Overflow");
	}
	var x1 = x.low;
	var this1 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this1;
};
haxe_Int64.eq = function(a,b) {
	if(a.high == b.high) {
		return a.low == b.low;
	} else {
		return false;
	}
};
haxe_Int64.eqInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	if(a.high == b_high) {
		return a.low == b_low;
	} else {
		return false;
	}
};
haxe_Int64.neq = function(a,b) {
	if(a.high == b.high) {
		return a.low != b.low;
	} else {
		return true;
	}
};
haxe_Int64.neqInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	if(a.high == b_high) {
		return a.low != b_low;
	} else {
		return true;
	}
};
haxe_Int64.lt = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
};
haxe_Int64.ltInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
};
haxe_Int64.intLt = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
};
haxe_Int64.lte = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
};
haxe_Int64.lteInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) <= 0;
};
haxe_Int64.intLte = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
};
haxe_Int64.gt = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
};
haxe_Int64.gtInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) > 0;
};
haxe_Int64.intGt = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
};
haxe_Int64.gte = function(a,b) {
	var v = a.high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b.low);
	}
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
};
haxe_Int64.gteInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a.low,b_low);
	}
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) >= 0;
};
haxe_Int64.intGte = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	if(v == 0) {
		v = haxe_Int32.ucompare(a_low,b.low);
	}
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
};
haxe_Int64.complement = function(a) {
	var this1 = new haxe__$Int64__$_$_$Int64(~a.high,~a.low);
	return this1;
};
haxe_Int64.and = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
	return this1;
};
haxe_Int64.or = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high | b.high,a.low | b.low);
	return this1;
};
haxe_Int64.xor = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high ^ b.high,a.low ^ b.low);
	return this1;
};
haxe_Int64.shl = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b);
		return this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
		return this1;
	}
};
haxe_Int64.shr = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high >> b,a.high << 32 - b | a.low >>> b);
		return this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high >> 31,a.high >> b - 32);
		return this1;
	}
};
haxe_Int64.ushr = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
		return this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(0,a.high >>> b - 32);
		return this1;
	}
};
haxe_Int64.get_high = function(this1) {
	return this1.high;
};
haxe_Int64.set_high = function(this1,x) {
	return this1.high = x;
};
haxe_Int64.get_low = function(this1) {
	return this1.low;
};
haxe_Int64.set_low = function(this1,x) {
	return this1.low = x;
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,toString: function() {
		return haxe_Int64.toString(this);
	}
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Int64Helper = function() { };
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = "haxe.Int64Helper";
haxe_Int64Helper.parseString = function(sParam) {
	var base_high = 0;
	var base_low = 10;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var current = this1;
	var this1 = new haxe__$Int64__$_$_$Int64(0,1);
	var multiplier = this1;
	var sIsNegative = false;
	var s = StringTools.trim(sParam);
	if(s.charAt(0) == "-") {
		sIsNegative = true;
		s = s.substring(1,s.length);
	}
	var len = s.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var digitInt = HxOverrides.cca(s,len - 1 - i) - 48;
		if(digitInt < 0 || digitInt > 9) {
			throw haxe_Exception.thrown("NumberFormatError");
		}
		if(digitInt != 0) {
			var digit_high = digitInt >> 31;
			var digit_low = digitInt;
			if(sIsNegative) {
				var mask = 65535;
				var al = multiplier.low & mask;
				var ah = multiplier.low >>> 16;
				var bl = digit_low & mask;
				var bh = digit_low >>> 16;
				var p00 = haxe_Int32._mul(al,bl);
				var p10 = haxe_Int32._mul(ah,bl);
				var p01 = haxe_Int32._mul(al,bh);
				var p11 = haxe_Int32._mul(ah,bh);
				var low = p00;
				var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
				p01 <<= 16;
				low = low + p01 | 0;
				if(haxe_Int32.ucompare(low,p01) < 0) {
					var ret = high++;
					high = high | 0;
				}
				p10 <<= 16;
				low = low + p10 | 0;
				if(haxe_Int32.ucompare(low,p10) < 0) {
					var ret1 = high++;
					high = high | 0;
				}
				high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
				var b_high = high;
				var b_low = low;
				var high1 = current.high - b_high | 0;
				var low1 = current.low - b_low | 0;
				if(haxe_Int32.ucompare(current.low,b_low) < 0) {
					var ret2 = high1--;
					high1 = high1 | 0;
				}
				var this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
				current = this1;
				if(!(current.high < 0)) {
					throw haxe_Exception.thrown("NumberFormatError: Underflow");
				}
			} else {
				var mask1 = 65535;
				var al1 = multiplier.low & mask1;
				var ah1 = multiplier.low >>> 16;
				var bl1 = digit_low & mask1;
				var bh1 = digit_low >>> 16;
				var p001 = haxe_Int32._mul(al1,bl1);
				var p101 = haxe_Int32._mul(ah1,bl1);
				var p011 = haxe_Int32._mul(al1,bh1);
				var p111 = haxe_Int32._mul(ah1,bh1);
				var low2 = p001;
				var high2 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
				p011 <<= 16;
				low2 = low2 + p011 | 0;
				if(haxe_Int32.ucompare(low2,p011) < 0) {
					var ret3 = high2++;
					high2 = high2 | 0;
				}
				p101 <<= 16;
				low2 = low2 + p101 | 0;
				if(haxe_Int32.ucompare(low2,p101) < 0) {
					var ret4 = high2++;
					high2 = high2 | 0;
				}
				high2 = high2 + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
				var b_high1 = high2;
				var b_low1 = low2;
				var high3 = current.high + b_high1 | 0;
				var low3 = current.low + b_low1 | 0;
				if(haxe_Int32.ucompare(low3,current.low) < 0) {
					var ret5 = high3++;
					high3 = high3 | 0;
				}
				var this2 = new haxe__$Int64__$_$_$Int64(high3,low3);
				current = this2;
				if(current.high < 0) {
					throw haxe_Exception.thrown("NumberFormatError: Overflow");
				}
			}
		}
		var mask2 = 65535;
		var al2 = multiplier.low & mask2;
		var ah2 = multiplier.low >>> 16;
		var bl2 = base_low & mask2;
		var bh2 = base_low >>> 16;
		var p002 = haxe_Int32._mul(al2,bl2);
		var p102 = haxe_Int32._mul(ah2,bl2);
		var p012 = haxe_Int32._mul(al2,bh2);
		var p112 = haxe_Int32._mul(ah2,bh2);
		var low4 = p002;
		var high4 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 <<= 16;
		low4 = low4 + p012 | 0;
		if(haxe_Int32.ucompare(low4,p012) < 0) {
			var ret6 = high4++;
			high4 = high4 | 0;
		}
		p102 <<= 16;
		low4 = low4 + p102 | 0;
		if(haxe_Int32.ucompare(low4,p102) < 0) {
			var ret7 = high4++;
			high4 = high4 | 0;
		}
		high4 = high4 + (haxe_Int32._mul(multiplier.low,base_high) + haxe_Int32._mul(multiplier.high,base_low) | 0) | 0;
		var this3 = new haxe__$Int64__$_$_$Int64(high4,low4);
		multiplier = this3;
	}
	return current;
};
haxe_Int64Helper.fromFloat = function(f) {
	if(isNaN(f) || !isFinite(f)) {
		throw haxe_Exception.thrown("Number is NaN or Infinite");
	}
	var noFractions = f - f % 1;
	if(noFractions > 9007199254740991) {
		throw haxe_Exception.thrown("Conversion overflow");
	}
	if(noFractions < -9007199254740991) {
		throw haxe_Exception.thrown("Conversion underflow");
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var result = this1;
	var neg = noFractions < 0;
	var rest = neg ? -noFractions : noFractions;
	var i = 0;
	while(rest >= 1) {
		var curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			var a_high = 0;
			var a_low = 1;
			var b = i;
			b &= 63;
			var b1;
			if(b == 0) {
				var this1 = new haxe__$Int64__$_$_$Int64(a_high,a_low);
				b1 = this1;
			} else if(b < 32) {
				var this2 = new haxe__$Int64__$_$_$Int64(a_high << b | a_low >>> 32 - b,a_low << b);
				b1 = this2;
			} else {
				var this3 = new haxe__$Int64__$_$_$Int64(a_low << b - 32,0);
				b1 = this3;
			}
			var high = result.high + b1.high | 0;
			var low = result.low + b1.low | 0;
			if(haxe_Int32.ucompare(low,result.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			var this4 = new haxe__$Int64__$_$_$Int64(high,low);
			result = this4;
		}
		++i;
	}
	if(neg) {
		var high = ~result.high;
		var low = ~result.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		result = this1;
	}
	return result;
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.lastError = null;
haxe_NativeStackTrace.wrapCallSite = null;
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.content = null;
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = HxOverrides.now() / 1000;
	var r = f();
	haxe_Log.trace(HxOverrides.now() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return HxOverrides.now() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
haxe_crypto_Base64.urlEncode = function(bytes,complement) {
	if(complement == null) {
		complement = false;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.URL_BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.urlDecode = function(str,complement) {
	if(complement == null) {
		complement = false;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.URL_BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.encode = function(s,base) {
	var b = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(base));
	return b.encodeString(s);
};
haxe_crypto_BaseCode.decode = function(s,base) {
	var b = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(base));
	return b.decodeString(s);
};
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,encodeString: function(s) {
		return this.encodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	,decodeString: function(s) {
		return this.decodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,copy: function() {
		var copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
	,clear: function() {
		this.root = null;
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,toString: function() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : "haxe.ds.Either", __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
haxe_ds_Either.__empty_constructs__ = [];
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,copy: function() {
		var copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_HashMap = {};
haxe_ds_HashMap._new = function() {
	var this1 = new haxe_ds__$HashMap_HashMapData();
	return this1;
};
haxe_ds_HashMap.set = function(this1,k,v) {
	var _this = this1.keys;
	var key = k.hashCode();
	_this.h[key] = k;
	var _this = this1.values;
	var key = k.hashCode();
	_this.h[key] = v;
};
haxe_ds_HashMap.get = function(this1,k) {
	var _this = this1.values;
	var key = k.hashCode();
	return _this.h[key];
};
haxe_ds_HashMap.exists = function(this1,k) {
	var _this = this1.values;
	var key = k.hashCode();
	return _this.h.hasOwnProperty(key);
};
haxe_ds_HashMap.remove = function(this1,k) {
	this1.values.remove(k.hashCode());
	return this1.keys.remove(k.hashCode());
};
haxe_ds_HashMap.keys = function(this1) {
	return this1.keys.iterator();
};
haxe_ds_HashMap.copy = function(this1) {
	var copied = new haxe_ds__$HashMap_HashMapData();
	copied.keys = this1.keys.copy();
	copied.values = this1.values.copy();
	return copied;
};
haxe_ds_HashMap.iterator = function(this1) {
	return this1.values.iterator();
};
haxe_ds_HashMap.keyValueIterator = function(this1) {
	return new haxe_iterators_HashMapKeyValueIterator(this1);
};
haxe_ds_HashMap.clear = function(this1) {
	this1.keys.h = { };
	this1.values.h = { };
};
var haxe_ds__$HashMap_HashMapData = function() {
	this.keys = new haxe_ds_IntMap();
	this.values = new haxe_ds_IntMap();
};
$hxClasses["haxe.ds._HashMap.HashMapData"] = haxe_ds__$HashMap_HashMapData;
haxe_ds__$HashMap_HashMapData.__name__ = "haxe.ds._HashMap.HashMapData";
haxe_ds__$HashMap_HashMapData.prototype = {
	keys: null
	,values: null
	,__class__: haxe_ds__$HashMap_HashMapData
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { };
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$List_ListKeyValueIterator(this.h);
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,filter: function(f) {
		var l2 = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,map: function(f) {
		var b = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds__$List_ListKeyValueIterator = function(head) {
	this.head = head;
	this.idx = 0;
};
$hxClasses["haxe.ds._List.ListKeyValueIterator"] = haxe_ds__$List_ListKeyValueIterator;
haxe_ds__$List_ListKeyValueIterator.__name__ = "haxe.ds._List.ListKeyValueIterator";
haxe_ds__$List_ListKeyValueIterator.prototype = {
	idx: null
	,head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return { value : val, key : this.idx++};
	}
	,__class__: haxe_ds__$List_ListKeyValueIterator
};
var haxe_ds_Map = {};
haxe_ds_Map.set = function(this1,key,value) {
	this1.set(key,value);
};
haxe_ds_Map.get = function(this1,key) {
	return this1.get(key);
};
haxe_ds_Map.exists = function(this1,key) {
	return this1.exists(key);
};
haxe_ds_Map.remove = function(this1,key) {
	return this1.remove(key);
};
haxe_ds_Map.keys = function(this1) {
	return this1.keys();
};
haxe_ds_Map.iterator = function(this1) {
	return this1.iterator();
};
haxe_ds_Map.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
haxe_ds_Map.copy = function(this1) {
	return this1.copy();
};
haxe_ds_Map.toString = function(this1) {
	return this1.toString();
};
haxe_ds_Map.clear = function(this1) {
	this1.clear();
};
haxe_ds_Map.arrayWrite = function(this1,k,v) {
	this1.set(k,v);
	return v;
};
haxe_ds_Map.toStringMap = function(t) {
	return new haxe_ds_StringMap();
};
haxe_ds_Map.toIntMap = function(t) {
	return new haxe_ds_IntMap();
};
haxe_ds_Map.toEnumValueMapMap = function(t) {
	return new haxe_ds_EnumValueMap();
};
haxe_ds_Map.toObjectMap = function(t) {
	return new haxe_ds_ObjectMap();
};
haxe_ds_Map.fromStringMap = function(map) {
	return map;
};
haxe_ds_Map.fromIntMap = function(map) {
	return map;
};
haxe_ds_Map.fromObjectMap = function(map) {
	return map;
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.count = null;
haxe_ds_ObjectMap.assignId = function(obj) {
	return (obj.__id__ = $global.$haxeUID++);
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_ObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { __keys__ : { }};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : "haxe.ds.Option", __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__empty_constructs__ = [haxe_ds_Option.None];
var haxe_ds_ReadOnlyArray = {};
haxe_ds_ReadOnlyArray.__properties__ = {get_length:"get_length"};
haxe_ds_ReadOnlyArray.get_length = function(this1) {
	return this1.length;
};
haxe_ds_ReadOnlyArray.get = function(this1,i) {
	return this1[i];
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.createCopy = function(h) {
	var copy = new haxe_ds_StringMap();
	for (var key in h) copy.h[key] = h[key];
	return copy;
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,keyValueIterator: function() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	,copy: function() {
		return haxe_ds_StringMap.createCopy(this.h);
	}
	,clear: function() {
		this.h = Object.create(null);
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds_Vector = {};
haxe_ds_Vector.__properties__ = {get_length:"get_length"};
haxe_ds_Vector._new = function(length) {
	var this1 = new Array(length);
	return this1;
};
haxe_ds_Vector.get = function(this1,index) {
	return this1[index];
};
haxe_ds_Vector.set = function(this1,index,val) {
	return this1[index] = val;
};
haxe_ds_Vector.get_length = function(this1) {
	return this1.length;
};
haxe_ds_Vector.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i = srcPos;
			var j = destPos;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				src[j] = src[i];
				++i;
				++j;
			}
		}
	} else {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			dest[destPos + i] = src[srcPos + i];
		}
	}
};
haxe_ds_Vector.toArray = function(this1) {
	return this1.slice(0);
};
haxe_ds_Vector.toData = function(this1) {
	return this1;
};
haxe_ds_Vector.fromData = function(data) {
	return data;
};
haxe_ds_Vector.fromArrayCopy = function(array) {
	return array.slice(0);
};
haxe_ds_Vector.copy = function(this1) {
	var this2 = new Array(this1.length);
	var r = this2;
	haxe_ds_Vector.blit(this1,0,r,0,this1.length);
	return r;
};
haxe_ds_Vector.join = function(this1,sep) {
	var b_b = "";
	var len = this1.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		b_b += Std.string(Std.string(this1[i]));
		if(i < len - 1) {
			b_b += sep == null ? "null" : "" + sep;
		}
	}
	return b_b;
};
haxe_ds_Vector.map = function(this1,f) {
	var length = this1.length;
	var this2 = new Array(length);
	var r = this2;
	var len = length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var v = f(this1[i]);
		r[i] = v;
	}
	return r;
};
haxe_ds_Vector.sort = function(this1,f) {
	this1.sort(f);
};
var haxe_ds_WeakMap = function() {
	throw haxe_Exception.thrown("Not implemented for this platform");
};
$hxClasses["haxe.ds.WeakMap"] = haxe_ds_WeakMap;
haxe_ds_WeakMap.__name__ = "haxe.ds.WeakMap";
haxe_ds_WeakMap.__interfaces__ = [haxe_IMap];
haxe_ds_WeakMap.prototype = {
	set: function(key,value) {
	}
	,get: function(key) {
		return null;
	}
	,exists: function(key) {
		return false;
	}
	,remove: function(key) {
		return false;
	}
	,keys: function() {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,keyValueIterator: function() {
		return null;
	}
	,copy: function() {
		return null;
	}
	,toString: function() {
		return null;
	}
	,clear: function() {
	}
	,__class__: haxe_ds_WeakMap
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.removeTrailingSlashes = function(path) {
	_hx_loop1: while(true) {
		var _g = HxOverrides.cca(path,path.length - 1);
		if(_g == null) {
			break;
		} else {
			switch(_g) {
			case 47:case 92:
				path = HxOverrides.substr(path,0,-1);
				break;
			default:
				break _hx_loop1;
			}
		}
	}
	return path;
};
haxe_io_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	if(StringTools.startsWith(path,"\\\\")) {
		return true;
	}
	return false;
};
haxe_io_Path.unescape = function(path) {
	var regex = new EReg("-x([0-9][0-9])","g");
	return regex.map(path,function(regex) {
		var code = Std.parseInt(regex.matched(1));
		return String.fromCodePoint(code);
	});
};
haxe_io_Path.escape = function(path,allowSlashes) {
	if(allowSlashes == null) {
		allowSlashes = false;
	}
	var regex = allowSlashes ? new EReg("[^A-Za-z0-9_/\\\\\\.]","g") : new EReg("[^A-Za-z0-9_\\.]","g");
	return regex.map(path,function(v) {
		return "-x" + HxOverrides.cca(v.matched(0),0);
	});
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_ArrayKeyValueIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayKeyValueIterator"] = haxe_iterators_ArrayKeyValueIterator;
haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator";
haxe_iterators_ArrayKeyValueIterator.prototype = {
	current: null
	,array: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return { value : this.array[this.current], key : this.current++};
	}
	,__class__: haxe_iterators_ArrayKeyValueIterator
};
var haxe_iterators_DynamicAccessIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessIterator"] = haxe_iterators_DynamicAccessIterator;
haxe_iterators_DynamicAccessIterator.__name__ = "haxe.iterators.DynamicAccessIterator";
haxe_iterators_DynamicAccessIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		return this.access[this.keys[this.index++]];
	}
	,__class__: haxe_iterators_DynamicAccessIterator
};
var haxe_iterators_DynamicAccessKeyValueIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
haxe_iterators_DynamicAccessKeyValueIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		var key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
	,__class__: haxe_iterators_DynamicAccessKeyValueIterator
};
var haxe_iterators_HashMapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys.iterator();
};
$hxClasses["haxe.iterators.HashMapKeyValueIterator"] = haxe_iterators_HashMapKeyValueIterator;
haxe_iterators_HashMapKeyValueIterator.__name__ = "haxe.iterators.HashMapKeyValueIterator";
haxe_iterators_HashMapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		var _this = this.map.values;
		var key1 = key.hashCode();
		return { value : _this.h[key1], key : key};
	}
	,__class__: haxe_iterators_HashMapKeyValueIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_iterators_StringIterator = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringIterator"] = haxe_iterators_StringIterator;
haxe_iterators_StringIterator.__name__ = "haxe.iterators.StringIterator";
haxe_iterators_StringIterator.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		return this.s.charCodeAt(this.offset++);
	}
	,__class__: haxe_iterators_StringIterator
};
var haxe_iterators_StringIteratorUnicode = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringIteratorUnicode"] = haxe_iterators_StringIteratorUnicode;
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
haxe_iterators_StringIteratorUnicode.unicodeIterator = function(s) {
	return new haxe_iterators_StringIteratorUnicode(s);
};
haxe_iterators_StringIteratorUnicode.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		var s = this.s;
		var index = this.offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			this.offset++;
		}
		return c1;
	}
	,__class__: haxe_iterators_StringIteratorUnicode
};
var haxe_iterators_StringKeyValueIterator = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringKeyValueIterator"] = haxe_iterators_StringKeyValueIterator;
haxe_iterators_StringKeyValueIterator.__name__ = "haxe.iterators.StringKeyValueIterator";
haxe_iterators_StringKeyValueIterator.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		return { key : this.offset, value : this.s.charCodeAt(this.offset++)};
	}
	,__class__: haxe_iterators_StringKeyValueIterator
};
var haxe_unit_TestCase = function() {
};
$hxClasses["haxe.unit.TestCase"] = haxe_unit_TestCase;
haxe_unit_TestCase.__name__ = "haxe.unit.TestCase";
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw haxe_Exception.thrown(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var haxe_unit_TestResult = function() {
	this.m_tests = new haxe_ds_List();
	this.success = true;
};
$hxClasses["haxe.unit.TestResult"] = haxe_unit_TestResult;
haxe_unit_TestResult.__name__ = "haxe.unit.TestResult";
haxe_unit_TestResult.prototype = {
	m_tests: null
	,success: null
	,add: function(t) {
		this.m_tests.add(t);
		if(!t.success) {
			this.success = false;
		}
	}
	,toString: function() {
		var buf_b = "";
		var failures = 0;
		var _g_head = this.m_tests.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var test = val;
			if(test.success == false) {
				buf_b += "* ";
				buf_b += Std.string(test.classname);
				buf_b += "::";
				buf_b += Std.string(test.method);
				buf_b += "()";
				buf_b += "\n";
				buf_b += "ERR: ";
				if(test.posInfos != null) {
					buf_b += Std.string(test.posInfos.fileName);
					buf_b += ":";
					buf_b += Std.string(test.posInfos.lineNumber);
					buf_b += "(";
					buf_b += Std.string(test.posInfos.className);
					buf_b += ".";
					buf_b += Std.string(test.posInfos.methodName);
					buf_b += ") - ";
				}
				buf_b += Std.string(test.error);
				buf_b += "\n";
				if(test.backtrace != null) {
					buf_b += Std.string(test.backtrace);
					buf_b += "\n";
				}
				buf_b += "\n";
				++failures;
			}
		}
		buf_b += "\n";
		if(failures == 0) {
			buf_b += "OK ";
		} else {
			buf_b += "FAILED ";
		}
		buf_b += Std.string(this.m_tests.length);
		buf_b += " tests, ";
		buf_b += failures == null ? "null" : "" + failures;
		buf_b += " failed, ";
		buf_b += Std.string(this.m_tests.length - failures);
		buf_b += " success";
		buf_b += "\n";
		return buf_b;
	}
	,__class__: haxe_unit_TestResult
};
var haxe_unit_TestRunner = function() {
	this.result = new haxe_unit_TestResult();
	this.cases = new haxe_ds_List();
};
$hxClasses["haxe.unit.TestRunner"] = haxe_unit_TestRunner;
haxe_unit_TestRunner.__name__ = "haxe.unit.TestRunner";
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
haxe_unit_TestRunner.customTrace = function(v,p) {
	haxe_unit_TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
};
haxe_unit_TestRunner.prototype = {
	result: null
	,cases: null
	,add: function(c) {
		this.cases.add(c);
	}
	,run: function() {
		this.result = new haxe_unit_TestResult();
		var _g_head = this.cases.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			this.runCase(c);
		}
		haxe_unit_TestRunner.print(this.result.toString());
		return this.result.success;
	}
	,runCase: function(t) {
		var old = haxe_Log.trace;
		haxe_Log.trace = haxe_unit_TestRunner.customTrace;
		var cl = js_Boot.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe_unit_TestRunner.print("Class: " + cl.__name__ + " ");
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var fname = f;
			var field = Reflect.field(t,f);
			if(StringTools.startsWith(fname,"test") && Reflect.isFunction(field)) {
				t.currentTest = new haxe_unit_TestStatus();
				t.currentTest.classname = cl.__name__;
				t.currentTest.method = fname;
				t.setup();
				try {
					field.apply(t,[]);
					if(t.currentTest.done) {
						t.currentTest.success = true;
						haxe_unit_TestRunner.print(".");
					} else {
						t.currentTest.success = false;
						t.currentTest.error = "(warning) no assert";
						haxe_unit_TestRunner.print("W");
					}
				} catch( _g1 ) {
					haxe_NativeStackTrace.lastError = _g1;
					var _g2 = haxe_Exception.caught(_g1).unwrap();
					if(((_g2) instanceof haxe_unit_TestStatus)) {
						haxe_unit_TestRunner.print("F");
						var tmp = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp);
					} else {
						var e = _g2;
						haxe_unit_TestRunner.print("E");
						if(e.message != null) {
							t.currentTest.error = "exception thrown : " + Std.string(e) + " [" + Std.string(e.message) + "]";
						} else {
							t.currentTest.error = "exception thrown : " + Std.string(e);
						}
						var tmp1 = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp1);
					}
				}
				this.result.add(t.currentTest);
				t.tearDown();
			}
		}
		haxe_unit_TestRunner.print("\n");
		haxe_Log.trace = old;
	}
	,__class__: haxe_unit_TestRunner
};
var haxe_unit_TestStatus = function() {
	this.done = false;
	this.success = false;
};
$hxClasses["haxe.unit.TestStatus"] = haxe_unit_TestStatus;
haxe_unit_TestStatus.__name__ = "haxe.unit.TestStatus";
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,method: null
	,classname: null
	,posInfos: null
	,backtrace: null
	,__class__: haxe_unit_TestStatus
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isInterface = function(o) {
	return o.__isInterface__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.debug = function() {
	debugger;
};
js_Lib.alert = function(v) {
	alert(js_Boot.__string_rec(v,""));
};
js_Lib.eval = function(code) {
	return eval(code);
};
js_Lib.get_undefined = function() {
	return undefined;
};
js_Lib.rethrow = function() {
};
js_Lib.getOriginalException = function() {
	return null;
};
js_Lib.getNextHaxeUID = function() {
	return $global.$haxeUID++;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_lib_KeyValue = {};
js_lib_KeyValue.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_lib_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_lib_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_lib_ObjectEntry = {};
js_lib_ObjectEntry.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_lib_ObjectEntry.get_key = function(this1) {
	return this1[0];
};
js_lib_ObjectEntry.get_value = function(this1) {
	return this1[1];
};
var stx_LiftString = function() { };
$hxClasses["stx.LiftString"] = stx_LiftString;
stx_LiftString.__name__ = "stx.LiftString";
stx_LiftString.sep = function(path) {
	if(new haxe_io_Path(path).backslash) {
		return "\\";
	} else {
		return "/";
	}
};
var stx_AppliableApi = function() { };
$hxClasses["stx.AppliableApi"] = stx_AppliableApi;
stx_AppliableApi.__name__ = "stx.AppliableApi";
stx_AppliableApi.__isInterface__ = true;
stx_AppliableApi.prototype = {
	apply: null
	,__class__: stx_AppliableApi
};
var stx_BinomialApi = function() { };
$hxClasses["stx.BinomialApi"] = stx_BinomialApi;
stx_BinomialApi.__name__ = "stx.BinomialApi";
stx_BinomialApi.__isInterface__ = true;
stx_BinomialApi.prototype = {
	duoply: null
	,__class__: stx_BinomialApi
};
var stx_RepliableApi = function() { };
$hxClasses["stx.RepliableApi"] = stx_RepliableApi;
stx_RepliableApi.__name__ = "stx.RepliableApi";
stx_RepliableApi.__isInterface__ = true;
stx_RepliableApi.prototype = {
	reply: null
	,__class__: stx_RepliableApi
};
var stx_SymbolApi = function() { };
$hxClasses["stx.SymbolApi"] = stx_SymbolApi;
stx_SymbolApi.__name__ = "stx.SymbolApi";
stx_SymbolApi.__isInterface__ = true;
stx_SymbolApi.prototype = {
	get_id: null
	,set_id: null
	,__class__: stx_SymbolApi
	,__properties__: {set_id:"set_id",get_id:"get_id"}
};
var stx_LogicSum = $hxEnums["stx.LogicSum"] = { __ename__ : "stx.LogicSum", __constructs__ : ["Seq","Alt","Neg","App"]
	,Seq: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.LogicSum",toString:$estr}; },$_.__params__ = ["l","r"],$_)
	,Alt: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.LogicSum",toString:$estr}; },$_.__params__ = ["l","r"],$_)
	,Neg: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"stx.LogicSum",toString:$estr}; },$_.__params__ = ["v"],$_)
	,App: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"stx.LogicSum",toString:$estr}; },$_.__params__ = ["v"],$_)
};
stx_LogicSum.__empty_constructs__ = [];
var stx_OpSum = $hxEnums["stx.OpSum"] = { __ename__ : "stx.OpSum", __constructs__ : ["Nop","Unop","Binop"]
	,Nop: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.OpSum",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Unop: ($_=function(op,v) { return {_hx_index:1,op:op,v:v,__enum__:"stx.OpSum",toString:$estr}; },$_.__params__ = ["op","v"],$_)
	,Binop: ($_=function(op,l,r) { return {_hx_index:2,op:op,l:l,r:r,__enum__:"stx.OpSum",toString:$estr}; },$_.__params__ = ["op","l","r"],$_)
};
stx_OpSum.__empty_constructs__ = [];
var stx_LiftStd = function() { };
$hxClasses["stx.LiftStd"] = stx_LiftStd;
stx_LiftStd.__name__ = "stx.LiftStd";
stx_LiftStd.core = function(__) {
	return new stx_core_Module();
};
stx_LiftStd.here = function(_,pos) {
	return stx_core_pack_Position._new(pos);
};
stx_LiftStd.rtid = function() {
	return function() {
	};
};
stx_LiftStd.chunk = function(_,v) {
	if(v == null) {
		return stx_core_type_ChunkSum.Tap;
	} else {
		return stx_core_type_ChunkSum.Val(v);
	}
};
stx_LiftStd.cell = function(_,v) {
	return stx_core_Cell.fromT(v);
};
stx_LiftStd.report = function(__,err) {
	var this1 = function() {
		return stx_core_Reporter.command;
	};
	(this1())(err);
};
var stx_core_Card = {};
stx_core_Card._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Card.of = function(wildcard,x) {
	return stx_core_Card._new(stx_core_type_CardSum.___(x));
};
stx_core_Card.asAny = function(this1) {
	return stx_core_Card.map(this1,function(x) {
		return x;
	});
};
stx_core_Card.asDynamic = function(this1) {
	return stx_core_Card.map(this1,function(x) {
		return x;
	});
};
stx_core_Card.then = function(this1,v) {
	var out = stx_core_Card._new(stx_core_type_CardSum.___(v));
	return out;
};
stx_core_Card.val = function(this1,pos) {
	return stx_core_Card.pull(this1,function(x) {
		return x;
	},pos);
};
stx_core_Card.pull = function(this1,fn,pos) {
	var a = this1.v;
	if(a == null) {
		throw haxe_Exception.thrown("Null Encountered at (${pos})");
	}
	return fn(a);
};
stx_core_Card.or = function(this1,thk) {
	if(this1 == null) {
		return stx_core_type_CardSum.___(thk());
	} else {
		var a = this1.v;
		return stx_core_type_CardSum.___(a);
	}
};
stx_core_Card.orv = function(this1,v) {
	return stx_core_Card.or(this1,function() {
		return v;
	});
};
stx_core_Card.def = function(this1,thk) {
	if(this1 == null) {
		return thk();
	} else {
		var a = this1.v;
		return a;
	}
};
stx_core_Card.defv = function(this1,v) {
	return stx_core_Card.def(this1,function() {
		return v;
	});
};
stx_core_Card.map = function(this1,fn) {
	var _g = this1.v;
	if(_g == null) {
		return stx_core_Card._new(stx_core_type_CardSum.___(null));
	} else {
		var a = _g;
		return stx_core_Card._new(stx_core_type_CardSum.___(fn(a)));
	}
};
stx_core_Card.fromWildcard = function(crd) {
	return stx_core_Card._new(stx_core_type_CardSum.___(crd));
};
stx_core_Card.ab = function(tp) {
	return stx_core_Card.val(stx_core_Card.map(tp,function(tp) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tp.a,tp.b);
	}),{ fileName : "stx/core/Card.hx", lineNumber : 62, className : "stx.core._Card.Card_Impl_", methodName : "ab"});
};
var stx_core_Cell = {};
stx_core_Cell.__properties__ = {get_value:"get_value"};
stx_core_Cell._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Cell.fromT = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return stx_core_Cell._new(ret);
};
stx_core_Cell.get_value = function(this1) {
	return this1[0];
};
stx_core_Cell.prj = function(this1) {
	return this1;
};
stx_core_Cell.get = function(this1) {
	return stx_core_Cell.get_value(this1);
};
var stx_core_Char = {};
stx_core_Char._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Char.code = function(this1) {
	return HxOverrides.cca(this1,0);
};
var stx_core_Chars = {};
stx_core_Chars._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Chars.char = function(this1,int) {
	return stx_core_Char._new(this1.charAt(int));
};
stx_core_Chars.add = function(this1,that) {
	return this1 + that;
};
var stx_core_Chunk = {};
stx_core_Chunk.__properties__ = {get_self:"get_self"};
stx_core_Chunk._ = function() {
	return stx_core_chunk_Constructor.ZERO;
};
stx_core_Chunk._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Chunk.lift = function(v) {
	return stx_core_Chunk._new(v);
};
stx_core_Chunk.pure = function(v) {
	return stx_core_chunk_Constructor.ZERO.pure(v);
};
stx_core_Chunk.fromTinkOutcome = function(outcome) {
	return stx_core_chunk_Constructor.ZERO.fromTinkOutcome(outcome);
};
stx_core_Chunk.fromError = function(e) {
	return stx_core_type_ChunkSum.End(e);
};
stx_core_Chunk.fromNull_T = function(v) {
	return stx_core_chunk_Constructor.ZERO.pure(v);
};
stx_core_Chunk.fromOption = function(opt) {
	return stx_core_chunk_Constructor.ZERO.fromOption(opt);
};
stx_core_Chunk.fold = function(this1,val,ers,Tap) {
	return stx_core_chunk_Constructor.ZERO._.fold(val,ers,Tap,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.opt_else = function(this1,_if,_else) {
	return stx_core_chunk_Constructor.ZERO._.opt_else(_if,_else,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.map = function(this1,fn) {
	return stx_core_chunk_Constructor.ZERO._.map(fn,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.flat_map = function(this1,fn) {
	return stx_core_chunk_Constructor.ZERO._.flat_map(fn,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.recover = function(this1,fn) {
	return stx_core_chunk_Constructor.ZERO._.recover(fn,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.zip = function(this1,that) {
	return stx_core_chunk_Constructor.ZERO._.zip(that,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.def = function(this1,v) {
	return stx_core_chunk_Constructor.ZERO._.def(v,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.is_defined = function(this1) {
	return stx_core_chunk_Constructor.ZERO._.is_defined(stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.elide = function(this1) {
	return stx_core_Chunk.get_self(this1);
};
stx_core_Chunk.iterator = function(this1) {
	return stx_core_chunk_Constructor.ZERO._.iterator(stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.array = function(this1) {
	var _e = this1;
	return Lambda.array({ iterator : function() {
		return $iterator(stx_core_Chunk)(_e);
	}});
};
stx_core_Chunk.errata = function(this1,fn) {
	return stx_core_chunk_Constructor.ZERO._.errata(fn,stx_core_Chunk.get_self(this1));
};
stx_core_Chunk.get_self = function(this1) {
	return this1;
};
var stx_core_Clause = {};
stx_core_Clause.__properties__ = {get_self:"get_self"};
stx_core_Clause._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Clause._ = function() {
	return stx_core__$Clause_Constructor.ZERO;
};
stx_core_Clause.lift = function(self) {
	return stx_core_Clause._new(self);
};
stx_core_Clause.make = function(brand,media) {
	return stx_core_Clause.lift({ brand : brand, media : media});
};
stx_core_Clause.copy = function(this1,brand,media) {
	return stx_core_Clause.make(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,brand),this1.brand),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,media),this1.media));
};
stx_core_Clause.prj = function(this1) {
	return this1;
};
stx_core_Clause.get_self = function(this1) {
	return stx_core_Clause.lift(this1);
};
var stx_core_pack_Clazz = $hx_exports["stx"]["Clazz"] = function() {
};
$hxClasses["stx.core.pack.Clazz"] = stx_core_pack_Clazz;
stx_core_pack_Clazz.__name__ = "stx.core.pack.Clazz";
stx_core_pack_Clazz.prototype = {
	definition: function() {
		return js_Boot.getClass(this);
	}
	,identifier: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: stx_core_pack_Clazz
};
var stx_core__$Clause_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core._Clause.Destructure"] = stx_core__$Clause_Destructure;
stx_core__$Clause_Destructure.__name__ = "stx.core._Clause.Destructure";
stx_core__$Clause_Destructure.__super__ = stx_core_pack_Clazz;
stx_core__$Clause_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	copy: function(brand,media,self) {
		return stx_core_Clause.make(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,brand),self.brand),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,media),self.media));
	}
	,__class__: stx_core__$Clause_Destructure
});
var stx_core__$Clause_Constructor = function() {
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core._Clause.Constructor"] = stx_core__$Clause_Constructor;
stx_core__$Clause_Constructor.__name__ = "stx.core._Clause.Constructor";
stx_core__$Clause_Constructor.lift = function(clause) {
	return stx_core_Clause._new(clause);
};
stx_core__$Clause_Constructor.make = function(brand,media) {
	return stx_core__$Clause_Constructor.lift({ brand : brand, media : media});
};
stx_core__$Clause_Constructor.__super__ = stx_core_pack_Clazz;
stx_core__$Clause_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	__class__: stx_core__$Clause_Constructor
});
var stx_core_Contract = {};
stx_core_Contract._ = function() {
	return stx_core_contract_Constructor.ZERO;
};
stx_core_Contract._new = function(v) {
	var this1 = v;
	return this1;
};
stx_core_Contract.unit = function() {
	return stx_core_contract_Constructor.ZERO.unit();
};
stx_core_Contract.pure = function(ch) {
	return stx_core_contract_Constructor.ZERO.pure(ch);
};
stx_core_Contract.trigger = function() {
	return stx_core_ContractTrigger._new();
};
stx_core_Contract.fromLazyError = function(fn) {
	return stx_core_contract_Constructor.ZERO.fromLazyError(fn);
};
stx_core_Contract.fromLazyChunk = function(fn) {
	return stx_core_contract_Constructor.ZERO.fromLazyChunk(fn);
};
stx_core_Contract.lift = function(ft) {
	return stx_core_Contract._new(ft);
};
stx_core_Contract.fromChunk = function(chk) {
	return stx_core_contract_Constructor.ZERO.fromChunk(chk);
};
stx_core_Contract.fromOption = function(m) {
	return stx_core_contract_Constructor.ZERO.fromOption(m);
};
stx_core_Contract.map = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.map(fn,this1);
};
stx_core_Contract.flat_map = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.flat_map(fn,this1);
};
stx_core_Contract.recover = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.recover(fn,this1);
};
stx_core_Contract.attempt = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.attempt(fn,this1);
};
stx_core_Contract.fold = function(this1,pure,err,unit) {
	return stx_core_contract_Constructor.ZERO._.fold(pure,err,unit,this1);
};
stx_core_Contract.receive = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.receive(fn,this1);
};
stx_core_Contract.zip = function(this1,that) {
	return stx_core_contract_Constructor.ZERO._.zip(that,this1);
};
stx_core_Contract.now = function(this1) {
	return stx_core_contract_Constructor.ZERO._.now(this1);
};
stx_core_Contract.errata = function(this1,fn) {
	return stx_core_contract_Constructor.ZERO._.errata(fn,this1);
};
stx_core_Contract.prj = function(this1) {
	return this1;
};
var stx_core_ContractTrigger = {};
stx_core_ContractTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
stx_core_ContractTrigger.asContract = function(this1) {
	return this1;
};
var stx_core_Declare = {};
stx_core_Declare.__properties__ = {get_self:"get_self"};
stx_core_Declare._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Declare.lift = function(self) {
	return stx_core_Declare._new(self);
};
stx_core_Declare.make = function(brand,media,union) {
	return stx_core_Declare.lift({ brand : brand, media : media, union : union});
};
stx_core_Declare.copy = function(this1,brand,media,union) {
	return stx_core_Declare.make(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,brand),this1.brand),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,media),this1.media),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,union),this1.union));
};
stx_core_Declare.prj = function(this1) {
	return this1;
};
stx_core_Declare.get_self = function(this1) {
	return stx_core_Declare.lift(this1);
};
var stx_core__$Declare_Constructor = function() {
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core._Declare.Constructor"] = stx_core__$Declare_Constructor;
stx_core__$Declare_Constructor.__name__ = "stx.core._Declare.Constructor";
stx_core__$Declare_Constructor.__super__ = stx_core_pack_Clazz;
stx_core__$Declare_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	lift: function(self) {
		return stx_core_Declare._new(self);
	}
	,make: function(brand,media,union) {
		return this.lift({ brand : brand, media : media, union : union});
	}
	,copy: function(brand,media,union,self) {
		return this.make(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,brand),self.brand),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,media),self.media),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,union),self.union));
	}
	,__class__: stx_core__$Declare_Constructor
});
var stx_core_Embed = {};
stx_core_Embed._new = function() {
	var this1 = stx_core__$Embed_Constructor.embed();
	return this1;
};
var stx_core__$Embed_Constructor = function() {
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core._Embed.Constructor"] = stx_core__$Embed_Constructor;
stx_core__$Embed_Constructor.__name__ = "stx.core._Embed.Constructor";
stx_core__$Embed_Constructor.embed = function() {
	var r = haxe_ds_Option.None;
	var unpack = null;
	unpack = function(fn) {
		r = haxe_ds_Option.None;
		fn();
		return r;
	};
	var pull = null;
	pull = function(fn) {
		r = haxe_ds_Option.None;
		fn();
		return stx_core_use_UseOptionNano.fudge(r);
	};
	var pack = null;
	pack = function(v) {
		var o = haxe_ds_Option.Some(v);
		return function() {
			r = o;
		};
	};
	var check = null;
	check = function(fn) {
		var _g = unpack(fn);
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.v;
			return true;
		case 1:
			return false;
		}
	};
	return { pack : pack, unpack : unpack, pull : pull, check : check};
};
stx_core__$Embed_Constructor.__super__ = stx_core_pack_Clazz;
stx_core__$Embed_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	__class__: stx_core__$Embed_Constructor
});
var stx_core_Enum = {};
stx_core_Enum._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Enum.constructs = function(this1) {
	return this1.__constructs__.slice();
};
stx_core_Enum.$name = function(this1) {
	return this1.__ename__;
};
stx_core_Enum.construct = function(this1,cons,args) {
	switch(cons._hx_index) {
	case 0:
		var i = cons.v;
		return stx_core_pack_Option.fromNullT(Type.createEnumIndex(this1,i,args));
	case 1:
		var s = cons.v;
		return stx_core_pack_Option.fromNullT(Type.createEnum(this1,s,args));
	}
};
var stx_core_EnumValue = {};
stx_core_EnumValue._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_EnumValue.params = function(this1) {
	return Type.enumParameters(this1);
};
stx_core_EnumValue.constructor = function(this1) {
	return $hxEnums[this1.__enum__].__constructs__[this1._hx_index];
};
stx_core_EnumValue.index = function(this1) {
	return this1._hx_index;
};
stx_core_EnumValue.alike = function(this1,that) {
	if(stx_core_EnumValue.constructor(this1) == stx_core_EnumValue.constructor(that)) {
		return stx_core_EnumValue.index(this1) == stx_core_EnumValue.index(that);
	} else {
		return false;
	}
};
stx_core_EnumValue.prj = function(this1) {
	return this1;
};
var stx_core_ErrorCode = {};
stx_core_ErrorCode._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_ErrorCode.prj = function(this1) {
	return this1;
};
stx_core_ErrorCode._ = function() {
	return stx_core__$ErrorCode_Constructor.ZERO;
};
var stx_core__$ErrorCode_Constructor = function() {
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core._ErrorCode.Constructor"] = stx_core__$ErrorCode_Constructor;
stx_core__$ErrorCode_Constructor.__name__ = "stx.core._ErrorCode.Constructor";
stx_core__$ErrorCode_Constructor.__super__ = stx_core_pack_Clazz;
stx_core__$ErrorCode_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	five_hundred: function() {
		return stx_core_error_$code_term_FiveHundred._new();
	}
	,__class__: stx_core__$ErrorCode_Constructor
});
var stx_core_ErrorMsg = {};
stx_core_ErrorMsg.create = function(this1,code,pos) {
	return new tink_core_TypedError(code,this1,pos);
};
stx_core_ErrorMsg.internal = function(this1,pos) {
	return stx_core_ErrorMsg.create(this1,500,pos);
};
var stx_core_Field = {};
stx_core_Field._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Field.fromTup = function(tp) {
	return stx_core_Field._new(stx_core_KV.fromObj({ key : stx_core_pack_CoupleLift.fst(tp), val : stx_core_pack_CoupleLift.snd(tp)}));
};
stx_core_Field.create = function(key,val) {
	return stx_core_Field._new(stx_core_KV.fromObj({ key : key, val : val}));
};
stx_core_Field.map = function(this1,fn) {
	return stx_core_KV.map(this1,fn);
};
stx_core_Field.into = function(this1,fn) {
	return fn(this1.key,this1.val);
};
stx_core_Field.toCouple = function(this1) {
	return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,this1.key,this1.val);
};
var stx_core_Generator = function(f,stack) {
	this.fn = function(i) {
		var o = stack[i] == null ? stack[i] = f() : stack[i];
		return o;
	};
	this.index = 0;
};
$hxClasses["stx.core.Generator"] = stx_core_Generator;
stx_core_Generator.__name__ = "stx.core.Generator";
stx_core_Generator.pure = function(fn) {
	return stx_core_Generator.create(fn,[]);
};
stx_core_Generator.create = function(fn,stack) {
	return new stx_core_Generator(fn,stack);
};
stx_core_Generator.yielding = function(fn) {
	var stack = [];
	return { iterator : function() {
		return stx_core_Generator.create(fn,stack).iterator();
	}};
};
stx_core_Generator.prototype = {
	fn: null
	,index: null
	,restart: function() {
		var next = new stx_core_Generator(null,null);
		next.fn = this.fn;
		return next;
	}
	,next: function() {
		var o;
		var _g = this.fn(this.index);
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			o = v;
			break;
		case 1:
			o = null;
			break;
		}
		this.index++;
		return o;
	}
	,hasNext: function() {
		var o;
		var _g = this.fn(this.index);
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.v;
			o = true;
			break;
		case 1:
			o = false;
			break;
		}
		return o;
	}
	,iterator: function() {
		return { next : $bind(this,this.next), hasNext : $bind(this,this.hasNext)};
	}
	,__class__: stx_core_Generator
};
var stx_core_ID = {};
stx_core_ID.prj = function(this1) {
	return this1;
};
stx_core_ID.toString = function(this1) {
	return this1;
};
var stx_core_Ident = {};
stx_core_Ident.fromDotPath = function(str) {
	var arr = str.split(".");
	if(arr.length == 1) {
		return { name : str, pack : []};
	} else {
		var head = arr.pop();
		return { name : head, pack : arr};
	}
};
stx_core_Ident.toStructure = function(this1) {
	var tail = [];
	var _g = 0;
	var _g1 = this1.pack;
	while(_g < _g1.length) {
		var val = _g1[_g];
		++_g;
		tail.push(val);
	}
	return { name : this1.name, pack : tail};
};
stx_core_Ident.canonical = function(this1) {
	if(this1.pack.length > 0) {
		return this1.pack.concat([this1.name]).join(".");
	} else {
		return this1.name;
	}
};
var stx_core_Iter = {};
stx_core_Iter._ = function() {
	return stx_core_iter_Constructor.ZERO;
};
stx_core_Iter._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Iter.toMap = function(this1,fn,unit) {
	return stx_core_iter_Constructor.ZERO._.toMap(this1,fn,unit);
};
stx_core_Iter.map = function(this1,fn) {
	return stx_core_iter_Constructor.ZERO._.map(this1,fn);
};
stx_core_Iter.cross = function(this1,that) {
	return stx_core_iter_Constructor.ZERO._.cross(this1,stx_core_Iter.prj(that));
};
stx_core_Iter.toArray = function(this1) {
	return Lambda.array(this1);
};
stx_core_Iter.toGenerator = function(this1) {
	return stx_core_iter_Constructor.ZERO._.toGenerator(this1);
};
stx_core_Iter.lfold = function(this1,fn,init) {
	return stx_core_iter_Constructor.ZERO._.lfold(this1,fn,init);
};
stx_core_Iter.prj = function(this1) {
	return this1;
};
var stx_core_KV = {};
stx_core_KV._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_KV.map = function(this1,fn) {
	return stx_core_KV.fromObj({ key : this1.key, val : fn(this1.val)});
};
stx_core_KV.fromObj = function(v) {
	return stx_core_KV._new(v);
};
stx_core_KV.fromTup = function(tp) {
	return stx_core_KV._new({ key : stx_core_pack_CoupleLift.fst(tp), val : stx_core_pack_CoupleLift.snd(tp)});
};
stx_core_KV.fst = function(this1) {
	return this1.key;
};
stx_core_KV.snd = function(this1) {
	return this1.val;
};
stx_core_KV.into = function(this1,fn) {
	return fn(this1.key,this1.val);
};
var stx_core_LogicalClock = function() { };
$hxClasses["stx.core.LogicalClock"] = stx_core_LogicalClock;
stx_core_LogicalClock.__name__ = "stx.core.LogicalClock";
stx_core_LogicalClock.previous = null;
stx_core_LogicalClock.get = function() {
	var st = stx_core_TimeStamp.pure;
	if(stx_core_LogicalClock.previous == null) {
		return st({ realm : stx_core_LogicalClock.previous = HxOverrides.now() / 1000, index : stx_core_LogicalClock.counter, exact : ++stx_core_LogicalClock.lifetime});
	} else {
		var stamp = HxOverrides.now() / 1000;
		if(stamp == stx_core_LogicalClock.previous) {
			return st({ realm : stamp, index : stx_core_LogicalClock.counter++, exact : ++stx_core_LogicalClock.lifetime});
		} else {
			stx_core_LogicalClock.previous = stamp;
			stx_core_LogicalClock.counter = 0;
			return st({ realm : stamp, index : stx_core_LogicalClock.counter, exact : ++stx_core_LogicalClock.lifetime});
		}
	}
};
var stx_core_Module = function() {
};
$hxClasses["stx.core.Module"] = stx_core_Module;
stx_core_Module.__name__ = "stx.core.Module";
stx_core_Module.prototype = {
	declare: function(brand,media,union) {
		return stx_core_Declare.make(brand,media,union);
	}
	,Future: function() {
		return new stx_core__$Module_Ft();
	}
	,__class__: stx_core_Module
};
var stx_core__$Module_Ft = function() {
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core._Module.Ft"] = stx_core__$Module_Ft;
stx_core__$Module_Ft.__name__ = "stx.core._Module.Ft";
stx_core__$Module_Ft.__super__ = stx_core_pack_Clazz;
stx_core__$Module_Ft.prototype = $extend(stx_core_pack_Clazz.prototype,{
	bind_fold: function(arr,fn,init) {
		return Lambda.fold(arr,function(next,memo) {
			var ret = memo.flatMap(function(tt) {
				return fn(next,tt);
			});
			return ret.gather();
		},init);
	}
	,__class__: stx_core__$Module_Ft
});
var stx_core_Parameter = {};
stx_core_Parameter._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_core_Reporter = {};
stx_core_Reporter.command = function(err) {
	throw haxe_Exception.thrown(err);
};
stx_core_Reporter._new = function() {
	var this1 = function() {
		return stx_core_Reporter.command;
	};
	return this1;
};
stx_core_Reporter.react = function(this1,err) {
	(this1())(err);
};
var stx_core_Resource = {};
stx_core_Resource.exists = function(str) {
	return Lambda.exists(haxe_Resource.listNames(),function(x) {
		return x == str;
	});
};
stx_core_Resource._new = function(str,pos) {
	if(!stx_core_Resource.exists(str)) {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,pos);
		var err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_FailureSum.ERR_OF("E_ResourceNotFound")),haxe_ds_Option.None,this1);
		var this1 = function() {
			return stx_core_Reporter.command;
		};
		(this1())(err);
	}
	var this1 = str;
	return this1;
};
stx_core_Resource.string = function(this1) {
	return haxe_Resource.getString(this1);
};
stx_core_Resource.bytes = function(this1) {
	return haxe_Resource.getBytes(this1);
};
stx_core_Resource.json = function(this1) {
	return JSON.parse(stx_core_Resource.string(this1));
};
var stx_core_SourceIdent = {};
stx_core_SourceIdent._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_SourceIdent.fromPosInfos = function(p) {
	var seperate_extension = p.fileName.split(".")[0];
	var folders = seperate_extension.split("/");
	var class_path = p.className.split(".");
	var class_name = class_path.pop();
	return stx_core_SourceIdent._new({ module : stx_core_pack_Option.fromNullT(new haxe_io_Path(p.fileName)), name : class_name, pack : class_path});
};
stx_core_SourceIdent.eq = function(this1,that) {
	if(this1.name != that.name) {
		return false;
	} else if(this1.pack.length != that.pack.length) {
		return false;
	} else if(stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(stx_core_use_UseOptionNano.zip(this1.module,that.module),function(tp) {
		return stx_core_pack_CoupleLift.decouple(tp,function(l,r) {
			return l.toString().length != r.toString().length;
		});
	}),false)) {
		return false;
	} else {
		var _g = 0;
		var _g1 = this1.pack.length - 1;
		while(_g < _g1) {
			var i = _g++;
			if(this1.pack[i] != that.pack[i]) {
				return false;
			}
		}
		if(stx_core_pack_OptionLift.is_defined(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,this1.module)) && stx_core_pack_OptionLift.is_defined(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,that.module))) {
			var this_string = stx_core_use_UseOptionNano.fudge(this1.module).toString();
			var that_string = stx_core_use_UseOptionNano.fudge(that.module).toString();
			var _g = 0;
			var _g1 = this_string.length;
			while(_g < _g1) {
				var i = _g++;
				if(this_string.charAt(i) != that_string.charAt(i)) {
					return false;
				}
			}
		}
		return true;
	}
};
stx_core_SourceIdent.toString = function(this1) {
	var _g = this1.pack;
	var _g1 = this1.module;
	if(_g1 == null) {
		if(_g.length == 0) {
			return this1.name;
		} else {
			var arr = _g;
			var next = [this1.name];
			var _g2 = 0;
			while(_g2 < arr.length) {
				var v = arr[_g2];
				++_g2;
				next.push(v);
			}
			return next.join(".");
		}
	} else if(_g.length == 0) {
		var md = _g1;
		return "" + Std.string(md) + "." + this1.name;
	} else {
		var md = _g1;
		var arr = _g;
		return "" + Std.string(md) + "." + this1.name;
	}
};
var stx_core_TimeStamp = {};
stx_core_TimeStamp.__properties__ = {get_exact:"get_exact",get_index:"get_index",get_realm:"get_realm"};
stx_core_TimeStamp._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_TimeStamp.pure = function(v) {
	return stx_core_TimeStamp._new(v);
};
stx_core_TimeStamp.get_realm = function(this1) {
	return this1.realm;
};
stx_core_TimeStamp.get_index = function(this1) {
	return this1.index;
};
stx_core_TimeStamp.get_exact = function(this1) {
	return this1.exact;
};
stx_core_TimeStamp.lt = function(this1,that) {
	return this1.exact < stx_core_TimeStamp.get_exact(that);
};
stx_core_TimeStamp.eq = function(this1,that) {
	return this1.realm == stx_core_TimeStamp.get_realm(that);
};
var stx_core_Unfold = {};
stx_core_Unfold.fromFunction = function(fn) {
	var unfolder = fn;
	return function(initial) {
		var initial1 = initial;
		var unfolder1 = unfolder;
		return { iterator : function() {
			var _next = haxe_ds_Option.None;
			var _progress = initial1;
			var precomputeNext = function() {
				var _g = unfolder1(_progress);
				switch(_g._hx_index) {
				case 0:
					var tup = _g.v;
					_progress = stx_core_pack_CoupleLift.fst(tup);
					_next = haxe_ds_Option.Some(stx_core_pack_CoupleLift.snd(tup));
					break;
				case 1:
					_progress = null;
					_next = haxe_ds_Option.None;
					break;
				}
			};
			precomputeNext();
			return { hasNext : function() {
				if(_next._hx_index == 0) {
					var _g = _next.v;
					return true;
				} else {
					return false;
				}
			}, next : function() {
				var n;
				if(_next._hx_index == 0) {
					var v = _next.v;
					n = v;
				} else {
					n = null;
				}
				precomputeNext();
				return n;
			}};
		}};
	};
};
stx_core_Unfold._new = function(v) {
	var this1 = v;
	return this1;
};
stx_core_Unfold.unfold = function(initial,unfolder) {
	return { iterator : function() {
		var _next = haxe_ds_Option.None;
		var _progress = initial;
		var precomputeNext = function() {
			var _g = unfolder(_progress);
			switch(_g._hx_index) {
			case 0:
				var tup = _g.v;
				_progress = stx_core_pack_CoupleLift.fst(tup);
				_next = haxe_ds_Option.Some(stx_core_pack_CoupleLift.snd(tup));
				break;
			case 1:
				_progress = null;
				_next = haxe_ds_Option.None;
				break;
			}
		};
		precomputeNext();
		return { hasNext : function() {
			if(_next._hx_index == 0) {
				var _g = _next.v;
				return true;
			} else {
				return false;
			}
		}, next : function() {
			var n;
			if(_next._hx_index == 0) {
				var v = _next.v;
				n = v;
			} else {
				n = null;
			}
			precomputeNext();
			return n;
		}};
	}};
};
var stx_core_Variable = {};
stx_core_Variable._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_Variable.map = function(this1,fn) {
	return stx_core_Variable._new(stx_core_pack_Couple._.map(this1,function(x) {
		return stx_core_pack_OptionLift.map(x,fn);
	}));
};
stx_core_Variable.make = function(k,v) {
	var vOpt = v == null ? haxe_ds_Option.None : haxe_ds_Option.Some(v);
	return stx_core_Variable._new(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,k,vOpt));
};
var stx_core_chars_Constructor = function() {
	this._ = new stx_core_chars_Destructure();
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core.chars.Constructor"] = stx_core_chars_Constructor;
stx_core_chars_Constructor.__name__ = "stx.core.chars.Constructor";
stx_core_chars_Constructor.__super__ = stx_core_pack_Clazz;
stx_core_chars_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,__class__: stx_core_chars_Constructor
});
var stx_core_chars_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core.chars.Destructure"] = stx_core_chars_Destructure;
stx_core_chars_Destructure.__name__ = "stx.core.chars.Destructure";
stx_core_chars_Destructure.__super__ = stx_core_pack_Clazz;
stx_core_chars_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	parse_bool: function(self) {
		var vLower = self.toLowerCase();
		switch(vLower) {
		case "false":
			return haxe_ds_Option.Some(false);
		case "true":
			switch(self) {
			case "0":
				return haxe_ds_Option.Some(false);
			case "1":
				return haxe_ds_Option.Some(true);
			default:
				return haxe_ds_Option.Some(true);
			}
			break;
		default:
			switch(self) {
			case "0":
				return haxe_ds_Option.Some(false);
			case "1":
				return haxe_ds_Option.Some(true);
			default:
				return haxe_ds_Option.None;
			}
		}
	}
	,parse_int: function(self) {
		return stx_core_pack_OptionLift.filter(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,Std.parseInt(self)),function(i) {
			return !isNaN(i);
		});
	}
	,parse_float: function(self) {
		return stx_core_pack_OptionLift.filter(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,parseFloat(self)),function(i) {
			return !isNaN(i);
		});
	}
	,starts_with: function(frag,self) {
		if(self.length >= frag.length && frag == HxOverrides.substr(self,0,frag.length)) {
			return true;
		} else {
			return false;
		}
	}
	,ends_with: function(frag,self) {
		if(self.length >= frag.length && frag == HxOverrides.substr(self,self.length - frag.length,null)) {
			return true;
		} else {
			return false;
		}
	}
	,contains: function(substr,self) {
		return self.indexOf(substr) != -1;
	}
	,replace: function(sub,by,self) {
		return StringTools.replace(self,sub,by);
	}
	,brackets: function(l,r,self) {
		return "" + l + self + r;
	}
	,prepend: function(before,self) {
		return stx_core_Chars.add(before,self);
	}
	,append: function(after,self) {
		return stx_core_Chars.add(self,after);
	}
	,cca: function(i,self) {
		return HxOverrides.cca(self,i);
	}
	,at: function(i,self) {
		return self.charAt(i);
	}
	,chunk: function(len,self) {
		if(len == null) {
			len = 1;
		}
		var start = 0;
		var end = Math.round(Math.min(start + len,self.length));
		if(end == 0) {
			return [];
		} else {
			var prefix = HxOverrides.substr(self,start,end);
			var rest = HxOverrides.substr(self,end,null);
			return [prefix].concat(this.chunk(len,rest));
		}
	}
	,chars: function(self) {
		var a = [];
		var _g = 0;
		var _g1 = self.length;
		while(_g < _g1) {
			var i = _g++;
			a.push(self.charAt(i));
		}
		return a;
	}
	,split: function(sep,self) {
		return self.split(sep);
	}
	,strip_white: function(self) {
		var l = self.length;
		var i = 0;
		var sb_b = "";
		while(i < l) {
			if(!this.is_space(i,self)) {
				sb_b += Std.string(self.charAt(i));
			}
			++i;
		}
		return sb_b;
	}
	,replace_recurse: function(sub,by,self) {
		if(sub.length == 0) {
			return this.replace(self,sub,by);
		}
		if(by.indexOf(sub) >= 0) {
			throw haxe_Exception.thrown("Infinite recursion");
		}
		var ns = self.toString();
		var olen = 0;
		var nlen = ns.length;
		while(olen != nlen) {
			olen = ns.length;
			this.replace(sub,by,ns);
			nlen = ns.length;
		}
		return ns;
	}
	,iterator: function(self) {
		var index = 0;
		return { hasNext : function() {
			return index < self.length;
		}, next : function() {
			if(index < self.length) {
				index += 1;
				return HxOverrides.substr(self,index - 1,1);
			} else {
				var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/core/chars/Destructure.hx", lineNumber : 168, className : "stx.core.chars.Destructure", methodName : "iterator"});
				throw haxe_Exception.thrown(new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_FailureSum.ERR_OF("E_IndexOutOfBounds")),haxe_ds_Option.None,this1));
			}
		}};
	}
	,is_space: function(pos,self) {
		var c = HxOverrides.cca(self,pos);
		if(!(c >= 9 && c <= 13)) {
			return c == 32;
		} else {
			return true;
		}
	}
	,chr: function(i) {
		return String.fromCodePoint(i);
	}
	,underscore: function(s) {
		var _this_r = new RegExp("::","g".split("u").join(""));
		s = s.replace(_this_r,"/");
		var _this_r = new RegExp("([A-Z]+)([A-Z][a-z])","g".split("u").join(""));
		s = s.replace(_this_r,"$1_$2");
		var _this_r = new RegExp("([a-z\\d])([A-Z])","g".split("u").join(""));
		s = s.replace(_this_r,"$1_$2");
		var _this_r = new RegExp("-","g".split("u").join(""));
		s = s.replace(_this_r,"_");
		return s.toLowerCase();
	}
	,after: function(sub,self) {
		var idx = self.indexOf(sub);
		if(idx < 0) {
			return "";
		}
		return self.substring(idx + sub.length,self.length);
	}
	,before: function(sub,self) {
		return self.substring(0,self.indexOf(sub));
	}
	,quote: function(str) {
		return "\"" + str + "\"";
	}
	,requote: function(str) {
		return stx_core_chars_Implementation.replace(str,"\"","\\\"");
	}
	,__class__: stx_core_chars_Destructure
});
var stx_core_chars_Implementation = function() { };
$hxClasses["stx.core.chars.Implementation"] = stx_core_chars_Implementation;
stx_core_chars_Implementation.__name__ = "stx.core.chars.Implementation";
stx_core_chars_Implementation._ = function() {
	return stx_core_chars_Constructor.ZERO._;
};
stx_core_chars_Implementation.parse_bool = function(self) {
	return stx_core_chars_Constructor.ZERO._.parse_bool(self);
};
stx_core_chars_Implementation.parse_int = function(self) {
	return stx_core_chars_Constructor.ZERO._.parse_int(self);
};
stx_core_chars_Implementation.parse_float = function(self) {
	return stx_core_chars_Constructor.ZERO._.parse_float(self);
};
stx_core_chars_Implementation.starts_with = function(self,frag) {
	return stx_core_chars_Constructor.ZERO._.starts_with(frag,self);
};
stx_core_chars_Implementation.ends_with = function(self,frag) {
	return stx_core_chars_Constructor.ZERO._.ends_with(frag,self);
};
stx_core_chars_Implementation.contains = function(self,substr) {
	return stx_core_chars_Constructor.ZERO._.contains(substr,self);
};
stx_core_chars_Implementation.replace = function(self,sub,by) {
	return stx_core_chars_Constructor.ZERO._.replace(sub,by,self);
};
stx_core_chars_Implementation.brackets = function(self,l,r) {
	return stx_core_chars_Constructor.ZERO._.brackets(l,r,self);
};
stx_core_chars_Implementation.prepend = function(self,before) {
	return stx_core_chars_Constructor.ZERO._.prepend(before,self);
};
stx_core_chars_Implementation.append = function(self,after) {
	return stx_core_chars_Constructor.ZERO._.append(after,self);
};
stx_core_chars_Implementation.cca = function(self,i) {
	return stx_core_chars_Constructor.ZERO._.cca(i,self);
};
stx_core_chars_Implementation.at = function(self,i) {
	return stx_core_chars_Constructor.ZERO._.at(i,self);
};
stx_core_chars_Implementation.chunk = function(self,len) {
	if(len == null) {
		len = 1;
	}
	return stx_core_chars_Constructor.ZERO._.chunk(len,self);
};
stx_core_chars_Implementation.chars = function(self) {
	return stx_core_chars_Constructor.ZERO._.chars(self);
};
stx_core_chars_Implementation.split = function(self,sep) {
	return stx_core_chars_Constructor.ZERO._.split(sep,self);
};
stx_core_chars_Implementation.strip_white = function(self) {
	return stx_core_chars_Constructor.ZERO._.strip_white(self);
};
stx_core_chars_Implementation.replace_recurse = function(self,sub,by) {
	return stx_core_chars_Constructor.ZERO._.replace_recurse(sub,by,self);
};
stx_core_chars_Implementation.iterator = function(self) {
	return stx_core_chars_Constructor.ZERO._.iterator(self);
};
stx_core_chars_Implementation.is_space = function(self,pos) {
	return stx_core_chars_Constructor.ZERO._.is_space(pos,self);
};
stx_core_chars_Implementation.underscore = function(self) {
	return stx_core_chars_Constructor.ZERO._.underscore(self);
};
stx_core_chars_Implementation.after = function(self,sub) {
	return stx_core_chars_Constructor.ZERO._.after(sub,self);
};
stx_core_chars_Implementation.before = function(self,sub) {
	return stx_core_chars_Constructor.ZERO._.before(sub,self);
};
stx_core_chars_Implementation.quote = function(self) {
	return stx_core_chars_Constructor.ZERO._.quote(self);
};
stx_core_chars_Implementation.requote = function(self) {
	return stx_core_chars_Constructor.ZERO._.requote(self);
};
var stx_core_chunk_Constructor = function() {
	this._ = new stx_core_chunk_Destructure();
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core.chunk.Constructor"] = stx_core_chunk_Constructor;
stx_core_chunk_Constructor.__name__ = "stx.core.chunk.Constructor";
stx_core_chunk_Constructor.__super__ = stx_core_pack_Clazz;
stx_core_chunk_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,pure: function(c) {
		if(c == null) {
			return stx_core_type_ChunkSum.Tap;
		} else {
			return stx_core_type_ChunkSum.Val(c);
		}
	}
	,all: function(arr,TapFail) {
		return Lambda.fold(arr,function(next,memo) {
			switch(memo._hx_index) {
			case 0:
				var _g = memo.v;
				switch(next._hx_index) {
				case 0:
					var memo1 = _g;
					var next1 = next.v;
					memo1.push(next1);
					return stx_core_type_ChunkSum.Val(memo1);
				case 1:
					var v = _g;
					if(TapFail == null) {
						return stx_core_type_ChunkSum.Tap;
					} else {
						return stx_core_type_ChunkSum.End(TapFail);
					}
					break;
				case 2:
					var memo1 = _g;
					var e = next.err;
					return stx_core_type_ChunkSum.End(e);
				}
				break;
			case 2:
				var _g = memo.err;
				switch(next._hx_index) {
				case 1:
					var e = _g;
					var err = stx_core_pack_OptionLift.defv(stx_core_pack_OptionLift.map(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e),function(e) {
						return e.next(TapFail);
					}),TapFail);
					return stx_core_type_ChunkSum.End(err);
				case 2:
					var e = _g;
					var e0 = next.err;
					var err = Lambda.fold(stx_core_pack_OptionLift.toArray(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e)).concat(stx_core_pack_OptionLift.toArray(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e0))),function(nx,mm) {
						return mm.next(nx);
					},TapFail);
					return stx_core_type_ChunkSum.End(err);
				default:
					var e = _g;
					return stx_core_type_ChunkSum.End(e);
				}
				break;
			default:
				if(TapFail == null) {
					return stx_core_type_ChunkSum.Tap;
				} else {
					return stx_core_type_ChunkSum.End(TapFail);
				}
			}
		},stx_core_type_ChunkSum.Val([]));
	}
	,available: function(rest) {
		return Lambda.fold(rest,function(next,memo) {
			if(memo._hx_index == 0) {
				var xs = memo.v;
				switch(next._hx_index) {
				case 0:
					var x = next.v;
					xs.push(x);
					return stx_core_type_ChunkSum.Val(xs);
				case 1:
					return stx_core_type_ChunkSum.Val(xs);
				case 2:
					var e = next.err;
					return stx_core_type_ChunkSum.End(e);
				}
			} else {
				return memo;
			}
		},stx_core_type_ChunkSum.Val([]));
	}
	,fromTinkOutcome: function(outcome) {
		var tmp;
		switch(outcome._hx_index) {
		case 0:
			var v = outcome.data;
			tmp = this.pure(v);
			break;
		case 1:
			var e = outcome.failure;
			tmp = stx_core_type_ChunkSum.End(e);
			break;
		}
		return stx_core_Chunk._new(tmp);
	}
	,fromOption: function(opt) {
		switch(opt._hx_index) {
		case 0:
			var v = opt.v;
			return stx_core_type_ChunkSum.Val(v);
		case 1:
			return stx_core_type_ChunkSum.Tap;
		}
	}
	,fromOptionError: function(opt) {
		switch(opt._hx_index) {
		case 0:
			var v = opt.v;
			return stx_core_type_ChunkSum.End(v);
		case 1:
			return stx_core_type_ChunkSum.Tap;
		}
	}
	,__class__: stx_core_chunk_Constructor
});
var stx_core_chunk_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core.chunk.Destructure"] = stx_core_chunk_Destructure;
stx_core_chunk_Destructure.__name__ = "stx.core.chunk.Destructure";
stx_core_chunk_Destructure.__super__ = stx_core_pack_Clazz;
stx_core_chunk_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	def: function(fn,self) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return v;
		case 1:
			return fn();
		case 2:
			var e = self.err;
			throw haxe_Exception.thrown(e);
		}
	}
	,fold: function(val,ers,tap,chk) {
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			return val(v);
		case 1:
			return tap();
		case 2:
			var e = chk.err;
			return ers(e);
		}
	}
	,map: function(fn,self) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			var o = fn(v);
			return stx_core_Chunk.pure(o);
		case 1:
			return stx_core_type_ChunkSum.Tap;
		case 2:
			var err = self.err;
			return stx_core_type_ChunkSum.End(err);
		}
	}
	,flatten: function(self) {
		return this.flat_map(function(x) {
			return x;
		},self);
	}
	,flat_map: function(fn,self) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return fn(v);
		case 1:
			return stx_core_type_ChunkSum.Tap;
		case 2:
			var err = self.err;
			return stx_core_type_ChunkSum.End(err);
		}
	}
	,recover: function(fn,self) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return stx_core_type_ChunkSum.Val(v);
		case 1:
			return stx_core_type_ChunkSum.Tap;
		case 2:
			var err = self.err;
			return fn(err);
		}
	}
	,errata: function(fn,self) {
		return this.recover(function(x) {
			return stx_core_type_ChunkSum.End(fn(x));
		},self);
	}
	,zip: function(that,self) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			switch(that._hx_index) {
			case 0:
				var v0 = that.v;
				return stx_core_type_ChunkSum.Val(stx_core_use_UseNano.toCouple(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,v,v0)));
			case 1:
				return stx_core_type_ChunkSum.Tap;
			case 2:
				var err = that.err;
				return stx_core_type_ChunkSum.End(err);
			}
			break;
		case 1:
			return stx_core_type_ChunkSum.Tap;
		case 2:
			var err = self.err;
			if(that._hx_index == 2) {
				var err0 = that.err;
				return stx_core_type_ChunkSum.End(err.next(err0));
			} else {
				return stx_core_type_ChunkSum.Tap;
			}
			break;
		}
	}
	,valueOption: function(chk) {
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			return haxe_ds_Option.Some(v);
		case 1:
			return haxe_ds_Option.None;
		case 2:
			var _g = chk.err;
			return haxe_ds_Option.None;
		}
	}
	,is_defined: function(self) {
		return this.fold(function(_) {
			return true;
		},function(_) {
			return false;
		},function() {
			return false;
		},self);
	}
	,opt_else: function(_if,_else,self) {
		return this.fold(_if,function(e) {
			return _else(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e));
		},function() {
			return _else(haxe_ds_Option.None);
		},self);
	}
	,fudge: function(pos,self) {
		if(self == null) {
			throw haxe_Exception.thrown("no self to push on");
		} else {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				return v;
			case 1:
				throw haxe_Exception.thrown("Value not found on force");
			case 2:
				var _g = self.err;
				if(_g == null) {
					throw haxe_Exception.thrown("Value not found on force");
				} else {
					var err = _g;
					throw haxe_Exception.thrown(err);
				}
				break;
			}
		}
	}
	,iterator: function(self) {
		var done = false;
		return { hasNext : function() {
			if(!done) {
				return stx_core_EnumValue.alike(stx_core_EnumValue._new(self),stx_core_EnumValue._new(stx_core_type_ChunkSum.Val(null)));
			} else {
				return false;
			}
		}, next : function() {
			done = true;
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return null;
			}
		}};
	}
	,__class__: stx_core_chunk_Destructure
});
var stx_core_contract_Constructor = function() {
	this._ = new stx_core_contract_Destructure();
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core.contract.Constructor"] = stx_core_contract_Constructor;
stx_core_contract_Constructor.__name__ = "stx.core.contract.Constructor";
stx_core_contract_Constructor.__super__ = stx_core_pack_Clazz;
stx_core_contract_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,unit: function() {
		return stx_core_Contract.pure(stx_core_type_ChunkSum.Tap);
	}
	,pure: function(ch) {
		return tink_core_Future.async(function(f) {
			f(ch);
		});
	}
	,bind_fold: function(it,start,fm) {
		var _gthis = this;
		return stx_core_Contract._new(stx_LiftStd.core(stx_core_pack_Wildcard.__).Future().bind_fold(it,function(next,memo) {
			switch(memo._hx_index) {
			case 0:
				var v = memo.v;
				return stx_core_Contract.prj(fm(v,next));
			case 1:
				return stx_core_Contract.prj(_gthis.unit());
			case 2:
				var err = memo.err;
				return stx_core_Contract.prj(_gthis.end(err));
			}
		},new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_core_type_ChunkSum.Val(start)))));
	}
	,lazy: function(fn) {
		return stx_core_Contract.lift(tink_core_Future.async(function(f) {
			f(stx_core_type_ChunkSum.Val(fn()));
		}));
	}
	,fromLazyError: function(fn) {
		return this.fromLazyChunk(function() {
			return stx_core_type_ChunkSum.End(fn());
		});
	}
	,fromLazyChunk: function(fn) {
		return tink_core_Future.async(function(f) {
			f(fn());
		});
	}
	,end: function(e) {
		return this.pure(stx_core_type_ChunkSum.End(e));
	}
	,tap: function() {
		return this.unit();
	}
	,fromChunk: function(chk) {
		return tink_core_Future.async(function(cb) {
			cb(chk);
		});
	}
	,fromOption: function(m) {
		var val = stx_core_pack_OptionLift.fold(m,function(x) {
			return stx_core_type_ChunkSum.Val(x);
		},function() {
			return stx_core_type_ChunkSum.Tap;
		});
		return this.fromChunk(val);
	}
	,__class__: stx_core_contract_Constructor
});
var stx_core_contract_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core.contract.Destructure"] = stx_core_contract_Destructure;
stx_core_contract_Destructure.__name__ = "stx.core.contract.Destructure";
stx_core_contract_Destructure.__super__ = stx_core_pack_Clazz;
stx_core_contract_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	zip: function(that,self) {
		var ret = stx_core_lift_LiftFuture.zip(stx_core_Contract.prj(self),stx_core_Contract.prj(that)).map(function(tp) {
			return stx_core_Chunk.zip(stx_core_pack_CoupleLift.fst(tp),stx_core_pack_CoupleLift.snd(tp));
		});
		var out = ret.gather();
		return out;
	}
	,map: function(fn,self) {
		var ret = stx_core_Contract.prj(self).map(function(x) {
			switch(x._hx_index) {
			case 0:
				var v = x.v;
				return stx_core_type_ChunkSum.Val(fn(v));
			case 1:
				return stx_core_type_ChunkSum.Tap;
			case 2:
				var err = x.err;
				return stx_core_type_ChunkSum.End(err);
			}
		});
		return stx_core_Contract.lift(ret.gather());
	}
	,flat_map: function(fn,self) {
		var ft = stx_core_Contract.prj(self);
		var ret = ft.flatMap(function(x) {
			switch(x._hx_index) {
			case 0:
				var v = x.v;
				return stx_core_Contract.prj(fn(v));
			case 1:
				return stx_core_Contract.prj(stx_core_Contract._new(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_core_type_ChunkSum.Tap))));
			case 2:
				var err = x.err;
				return stx_core_Contract.prj(stx_core_Contract.fromChunk(stx_core_type_ChunkSum.End(err)));
			}
		});
		return ret.gather();
	}
	,fold: function(val,ers,nil,self) {
		var _g = ($_=stx_core_chunk_Constructor.ZERO._,$bind($_,$_.fold));
		var val1 = val;
		var ers1 = ers;
		var tap = nil;
		var ret = function(chk) {
			return _g(val1,ers1,tap,chk);
		};
		var ret1 = stx_core_Contract.prj(self).map(ret);
		return ret1.gather();
	}
	,recover: function(fn,self) {
		return stx_core_Contract.lift(this.fold(function(x) {
			return stx_core_type_ChunkSum.Val(x);
		},function(e) {
			return fn(e);
		},function() {
			return stx_core_type_ChunkSum.Tap;
		},self));
	}
	,attempt: function(fn,self) {
		return this.fold(function(x) {
			return fn(x);
		},function(v) {
			return stx_core_type_ChunkSum.End(v);
		},function() {
			return stx_core_type_ChunkSum.Tap;
		},self);
	}
	,receive: function(fn,self) {
		var ret = stx_core_Contract.prj(self).map(function(chk) {
			switch(chk._hx_index) {
			case 0:
				var v = chk.v;
				fn(v);
				return haxe_ds_Option.None;
			case 1:
				return haxe_ds_Option.None;
			case 2:
				var e = chk.err;
				return stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e);
			}
		});
		return ret.gather();
	}
	,now: function(self) {
		var out = null;
		stx_core_Contract.prj(self).handle(function(v) {
			out = v;
		});
		if(out == null) {
			out = stx_core_type_ChunkSum.Tap;
		}
		return out;
	}
	,errata: function(fn,self) {
		var ret = stx_core_Contract.prj(self).map(function(chk) {
			return stx_core_Chunk.errata(chk,fn);
		});
		return ret.gather();
	}
	,__class__: stx_core_contract_Destructure
});
var stx_core_error_$code_term_FiveHundred = {};
stx_core_error_$code_term_FiveHundred._new = function() {
	var this1 = stx_core_ErrorCode._new(500);
	return this1;
};
var stx_core_iter_Constructor = function() {
	this._ = new stx_core_iter_Destructure();
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core.iter.Constructor"] = stx_core_iter_Constructor;
stx_core_iter_Constructor.__name__ = "stx.core.iter.Constructor";
stx_core_iter_Constructor.__super__ = stx_core_pack_Clazz;
stx_core_iter_Constructor.prototype = $extend(stx_core_pack_Clazz.prototype,{
	_: null
	,__class__: stx_core_iter_Constructor
});
var stx_core_iter_Destructure = function() {
	stx_core_pack_Clazz.call(this);
};
$hxClasses["stx.core.iter.Destructure"] = stx_core_iter_Destructure;
stx_core_iter_Destructure.__name__ = "stx.core.iter.Destructure";
stx_core_iter_Destructure.__super__ = stx_core_pack_Clazz;
stx_core_iter_Destructure.prototype = $extend(stx_core_pack_Clazz.prototype,{
	cross: function(self,that) {
		return { iterator : function() {
			var l_it = $getIterator(self);
			var r_it = $getIterator(that);
			var l_val = null;
			var rec = null;
			rec = function() {
				if(l_val != null && l_it.hasNext()) {
					l_val = l_it.next();
				}
				if(r_it.hasNext()) {
					return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l_val,r_it.next());
				} else {
					if(l_it.hasNext()) {
						r_it = $getIterator(that);
					}
					l_val = null;
					return rec();
				}
			};
			return { next : rec, hasNext : function() {
				if(!l_it.hasNext()) {
					return r_it.hasNext();
				} else {
					return false;
				}
			}};
		}};
	}
	,zip: function(l,r) {
		return { iterator : function() {
			var lit = $getIterator(l);
			var rit = $getIterator(r);
			return { next : function() {
				return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,lit.next(),rit.next());
			}, hasNext : function() {
				if(lit.hasNext()) {
					return rit.hasNext();
				} else {
					return false;
				}
			}};
		}};
	}
	,ldrop: function(it,n) {
		return { iterator : function() {
			var iter = $getIterator(it);
			while(n > 0) {
				iter.next();
				n -= 1;
			}
			return iter;
		}};
	}
	,tail: function(it) {
		return this.ldrop(it,1);
	}
	,toMap: function(iter,fn,map) {
		var i = $getIterator(iter);
		while(i.hasNext()) {
			var i1 = i.next();
			var kv = fn(i1);
			stx_core_pack_CoupleLift.decouple(kv,$bind(map,map.set));
		}
		return map;
	}
	,map: function(iter,fn) {
		return { iterator : function() {
			var i = $getIterator(iter);
			return { next : function() {
				return fn(i.next());
			}, hasNext : function() {
				return i.hasNext();
			}};
		}};
	}
	,lfold: function(iter,mapper,seed) {
		var folded = seed;
		var e = $getIterator(iter);
		while(e.hasNext()) {
			var e1 = e.next();
			folded = mapper(e1,folded);
		}
		return folded;
	}
	,toGenerator: function(self) {
		var iter = haxe_ds_Option.None;
		return function() {
			if(iter == haxe_ds_Option.None) {
				iter = haxe_ds_Option.Some($getIterator(self));
			}
			return stx_core_pack_OptionLift.flat_map(iter,function(x) {
				if(x.hasNext()) {
					return haxe_ds_Option.Some(x.next());
				} else {
					return haxe_ds_Option.None;
				}
			});
		};
	}
	,__class__: stx_core_iter_Destructure
});
var stx_core_lift_LiftArrayToIter = function() { };
$hxClasses["stx.core.lift.LiftArrayToIter"] = stx_core_lift_LiftArrayToIter;
stx_core_lift_LiftArrayToIter.__name__ = "stx.core.lift.LiftArrayToIter";
stx_core_lift_LiftArrayToIter.toIter = function(arr) {
	return arr;
};
var stx_core_lift_LiftBoolToPrimitive = function() { };
$hxClasses["stx.core.lift.LiftBoolToPrimitive"] = stx_core_lift_LiftBoolToPrimitive;
stx_core_lift_LiftBoolToPrimitive.__name__ = "stx.core.lift.LiftBoolToPrimitive";
stx_core_lift_LiftBoolToPrimitive.toPrimitive = function(b) {
	return stx_core_pack_PrimitiveDef.PBool(b);
};
var stx_core_lift_LiftCoupleToField = function() { };
$hxClasses["stx.core.lift.LiftCoupleToField"] = stx_core_lift_LiftCoupleToField;
stx_core_lift_LiftCoupleToField.__name__ = "stx.core.lift.LiftCoupleToField";
stx_core_lift_LiftCoupleToField.toField = function(tp) {
	return stx_core_Field.fromTup(tp);
};
var stx_core_lift_LiftErrToChunk = function() { };
$hxClasses["stx.core.lift.LiftErrToChunk"] = stx_core_lift_LiftErrToChunk;
stx_core_lift_LiftErrToChunk.__name__ = "stx.core.lift.LiftErrToChunk";
stx_core_lift_LiftErrToChunk.toChunk = function(err) {
	return stx_core_Chunk.fromError(err);
};
var stx_core_lift_LiftFunXRToGenerator = function() { };
$hxClasses["stx.core.lift.LiftFunXRToGenerator"] = stx_core_lift_LiftFunXRToGenerator;
stx_core_lift_LiftFunXRToGenerator.__name__ = "stx.core.lift.LiftFunXRToGenerator";
stx_core_lift_LiftFunXRToGenerator.toGenerator = function(fn) {
	return stx_core_Generator.yielding(fn);
};
var stx_core_lift_LiftFuture = function() { };
$hxClasses["stx.core.lift.LiftFuture"] = stx_core_lift_LiftFuture;
stx_core_lift_LiftFuture.__name__ = "stx.core.lift.LiftFuture";
stx_core_lift_LiftFuture.zip = function(self,that) {
	var done = false;
	var left = haxe_ds_Option.None;
	var right = haxe_ds_Option.None;
	var trigger = new tink_core_FutureTrigger();
	var on_done = function() {
		var on_done = left._hx_index == 0;
	};
	var l_handler = function(l) {
		left = haxe_ds_Option.Some(l);
		on_done();
	};
	var r_handler = function(r) {
		right = haxe_ds_Option.Some(r);
		on_done();
	};
	self.handle(l_handler);
	that.handle(r_handler);
	return trigger;
};
stx_core_lift_LiftFuture.tryAndThenCancelIfNotAvailable = function(ft) {
	var output = haxe_ds_Option.None;
	var canceller = ft.handle(function(x) {
		output = haxe_ds_Option.Some(x);
	});
	if(!stx_core_pack_OptionLift.is_defined(output)) {
		if(canceller != null) {
			canceller.cancel();
		}
	}
	return output;
};
var stx_core_lift_LiftIMapToArrayKV = function() { };
$hxClasses["stx.core.lift.LiftIMapToArrayKV"] = stx_core_lift_LiftIMapToArrayKV;
stx_core_lift_LiftIMapToArrayKV.__name__ = "stx.core.lift.LiftIMapToArrayKV";
stx_core_lift_LiftIMapToArrayKV.fromIMap = function(map) {
	var out = [];
	var _g = map.keyValueIterator();
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var key = _g1.key;
		var val = _g1.value;
		out.push(stx_core_KV.fromTup(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,key,val)));
	}
	return out;
};
var stx_core_lift_LiftIntToPrimitive = function() { };
$hxClasses["stx.core.lift.LiftIntToPrimitive"] = stx_core_lift_LiftIntToPrimitive;
stx_core_lift_LiftIntToPrimitive.__name__ = "stx.core.lift.LiftIntToPrimitive";
stx_core_lift_LiftIntToPrimitive.toPrimitive = function(i) {
	return stx_core_pack_PrimitiveDef.PInt(i);
};
var stx_core_lift_LiftIterOfFieldToStringMap = function() { };
$hxClasses["stx.core.lift.LiftIterOfFieldToStringMap"] = stx_core_lift_LiftIterOfFieldToStringMap;
stx_core_lift_LiftIterOfFieldToStringMap.__name__ = "stx.core.lift.LiftIterOfFieldToStringMap";
stx_core_lift_LiftIterOfFieldToStringMap.toMap = function(iter) {
	return stx_core_iter_Constructor.ZERO._.toMap(iter,function(f) {
		return stx_core_Field.toCouple(f);
	},new haxe_ds_StringMap());
};
var stx_core_lift_LiftIterableToIter = function() { };
$hxClasses["stx.core.lift.LiftIterableToIter"] = stx_core_lift_LiftIterableToIter;
stx_core_lift_LiftIterableToIter.__name__ = "stx.core.lift.LiftIterableToIter";
stx_core_lift_LiftIterableToIter.toIter = function(it) {
	return it;
};
var stx_core_lift_LiftIteratorToIter = function() { };
$hxClasses["stx.core.lift.LiftIteratorToIter"] = stx_core_lift_LiftIteratorToIter;
stx_core_lift_LiftIteratorToIter.__name__ = "stx.core.lift.LiftIteratorToIter";
stx_core_lift_LiftIteratorToIter.toIter = function(it) {
	return { iterator : function() {
		return it;
	}};
};
var stx_core_lift_LiftMapToIter = function() { };
$hxClasses["stx.core.lift.LiftMapToIter"] = stx_core_lift_LiftMapToIter;
stx_core_lift_LiftMapToIter.__name__ = "stx.core.lift.LiftMapToIter";
stx_core_lift_LiftMapToIter.toIter = function(map) {
	return { iterator : function() {
		var source = map.keyValueIterator();
		return { next : function() {
			var out = source.next();
			return stx_core_KV.fromObj({ key : out.key, val : out.value});
		}, hasNext : $bind(source,source.hasNext)};
	}};
};
var stx_core_lift_LiftOptionToChunk = function() { };
$hxClasses["stx.core.lift.LiftOptionToChunk"] = stx_core_lift_LiftOptionToChunk;
stx_core_lift_LiftOptionToChunk.__name__ = "stx.core.lift.LiftOptionToChunk";
stx_core_lift_LiftOptionToChunk.toChunk = function(opt) {
	switch(opt._hx_index) {
	case 0:
		var v = opt.v;
		return stx_core_type_ChunkSum.Val(v);
	case 1:
		return stx_core_type_ChunkSum.Tap;
	}
};
var stx_core_lift_LiftPath = function() { };
$hxClasses["stx.core.lift.LiftPath"] = stx_core_lift_LiftPath;
stx_core_lift_LiftPath.__name__ = "stx.core.lift.LiftPath";
stx_core_lift_LiftPath.sep = function(path) {
	if(path.backslash) {
		return "\\";
	} else {
		return "/";
	}
};
stx_core_lift_LiftPath.split = function(path) {
	return path.toString().split(stx_core_lift_LiftPath.sep(path));
};
var stx_core_lift_LiftStringMapToIter = function() { };
$hxClasses["stx.core.lift.LiftStringMapToIter"] = stx_core_lift_LiftStringMapToIter;
stx_core_lift_LiftStringMapToIter.__name__ = "stx.core.lift.LiftStringMapToIter";
stx_core_lift_LiftStringMapToIter.toIter = function(map) {
	return stx_core_Iter.map(stx_core_lift_LiftMapToIter.toIter(map),function(x) {
		return stx_core_Field._new(x);
	});
};
var stx_core_lift_LiftStringToIdent = function() { };
$hxClasses["stx.core.lift.LiftStringToIdent"] = stx_core_lift_LiftStringToIdent;
stx_core_lift_LiftStringToIdent.__name__ = "stx.core.lift.LiftStringToIdent";
stx_core_lift_LiftStringToIdent.ident = function(__,str) {
	return stx_core_Ident.fromDotPath(str);
};
var stx_core_lift_LiftStringToResource = function() { };
$hxClasses["stx.core.lift.LiftStringToResource"] = stx_core_lift_LiftStringToResource;
stx_core_lift_LiftStringToResource.__name__ = "stx.core.lift.LiftStringToResource";
stx_core_lift_LiftStringToResource.resource = function(stx,str,pos) {
	if(!stx_core_Resource.exists(str)) {
		var this1 = stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,pos);
		var err = new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_FailureSum.ERR_OF("E_ResourceNotFound")),haxe_ds_Option.None,this1);
		var this1 = function() {
			return stx_core_Reporter.command;
		};
		(this1())(err);
	}
	var this1 = str;
	return this1;
};
var stx_core_lift_LiftTinkOutcomeToChunk = function() { };
$hxClasses["stx.core.lift.LiftTinkOutcomeToChunk"] = stx_core_lift_LiftTinkOutcomeToChunk;
stx_core_lift_LiftTinkOutcomeToChunk.__name__ = "stx.core.lift.LiftTinkOutcomeToChunk";
stx_core_lift_LiftTinkOutcomeToChunk.core = function(oc) {
	return stx_core_Chunk.fromTinkOutcome(oc);
};
var stx_core_pack_CoupleLift = function() { };
$hxClasses["stx.core.pack.CoupleLift"] = stx_core_pack_CoupleLift;
stx_core_pack_CoupleLift.__name__ = "stx.core.pack.CoupleLift";
stx_core_pack_CoupleLift.map = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			tp(ti,fn(tii));
		});
	};
};
stx_core_pack_CoupleLift.lmap = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			tp(fn(ti),tii);
		});
	};
};
stx_core_pack_CoupleLift.rmap = function(self,fn) {
	return stx_core_pack_CoupleLift.map(self,fn);
};
stx_core_pack_CoupleLift.fst = function(self) {
	return stx_core_pack_CoupleLift.decouple(self,function(tI,_) {
		return tI;
	});
};
stx_core_pack_CoupleLift.snd = function(self) {
	return stx_core_pack_CoupleLift.decouple(self,function(_,tII) {
		return tII;
	});
};
stx_core_pack_CoupleLift.swap = function(self) {
	return function(tp) {
		self(function(ti,tii) {
			tp(tii,ti);
		});
	};
};
stx_core_pack_CoupleLift.equals = function(lhs,rhs) {
	return stx_core_pack_CoupleLift.decouple(lhs,function(t0l,t0r) {
		return stx_core_pack_CoupleLift.decouple(rhs,function(t1l,t1r) {
			if(t0l == t1l) {
				return t0r == t1r;
			} else {
				return false;
			}
		});
	});
};
stx_core_pack_CoupleLift.reduce = function(self,flhs,frhs,plus) {
	return stx_core_pack_CoupleLift.decouple(self,function(tI,tII) {
		return plus(flhs(tI),frhs(tII));
	});
};
stx_core_pack_CoupleLift.decouple = function(self,fn) {
	var out = null;
	self(function(ti,tii) {
		out = fn(ti,tii);
	});
	return out;
};
stx_core_pack_CoupleLift.cat = function(self) {
	return stx_core_pack_CoupleLift.decouple(self,function(l,r) {
		return [haxe_ds_Either.Left(l),haxe_ds_Either.Right(r)];
	});
};
var stx_core_pack_Couple = {};
var stx_core_pack_EitherLift = function() { };
$hxClasses["stx.core.pack.EitherLift"] = stx_core_pack_EitherLift;
stx_core_pack_EitherLift.__name__ = "stx.core.pack.EitherLift";
stx_core_pack_EitherLift.fold = function(self,lhs,rhs) {
	switch(self._hx_index) {
	case 0:
		var l = self.v;
		return lhs(l);
	case 1:
		var r = self.v;
		return rhs(r);
	}
};
stx_core_pack_EitherLift.map = function(self,fn) {
	return stx_core_pack_EitherLift.flat_map(self,function(x) {
		return haxe_ds_Either.Right(fn(x));
	});
};
stx_core_pack_EitherLift.flat_map = function(self,fn) {
	return stx_core_pack_EitherLift.fold(self,haxe_ds_Either.Left,function(r) {
		return fn(r);
	});
};
stx_core_pack_EitherLift.flip = function(self) {
	return stx_core_pack_EitherLift.fold(self,function(l) {
		return haxe_ds_Either.Right(l);
	},function(r) {
		return haxe_ds_Either.Left(r);
	});
};
var stx_core_pack_Either = {};
stx_core_pack_Either._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Either.lift = function(self) {
	return stx_core_pack_Either._new(self);
};
stx_core_pack_Either.prj = function(this1) {
	return this1;
};
var stx_core_pack_Err = function(data,prev,pos) {
	this.data = data;
	this.prev = prev;
	this.pos = pos;
};
$hxClasses["stx.core.pack.Err"] = stx_core_pack_Err;
stx_core_pack_Err.__name__ = "stx.core.pack.Err";
stx_core_pack_Err.prototype = {
	uuid: null
	,get_uuid: function() {
		return stx_core_pack_Err.UUID;
	}
	,prev: null
	,data: null
	,pos: null
	,map: function(fn) {
		var next_data = stx_core_pack_OptionLift.map(this.data,function(t) {
			switch(t._hx_index) {
			case 0:
				var t1 = t.v;
				return stx_core_pack_FailureSum.ERR_OF(fn(t1));
			case 1:
				var spec = t.spec;
				return stx_core_pack_FailureSum.ERR(spec);
			}
		});
		var next_prev;
		var _g = this.prev;
		if(_g == null) {
			next_prev = haxe_ds_Option.None;
		} else if(_g._hx_index == 0) {
			var err = _g.v;
			next_prev = haxe_ds_Option.Some(err.map(fn));
		} else {
			next_prev = haxe_ds_Option.None;
		}
		return new stx_core_pack_Err(next_data,next_prev,this.pos);
	}
	,copy: function(data,prev,pos) {
		return new stx_core_pack_Err(stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,data),this.data),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,prev),this.prev),stx_core_pack_OptionLift.defv(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,pos),this.pos));
	}
	,last: function() {
		var self = this;
		while(self.prev != haxe_ds_Option.None) {
			var _g = self.prev;
			if(_g._hx_index == 0) {
				var last = _g.v;
				self = last;
			} else {
				break;
			}
		}
		return self;
	}
	,next: function(that) {
		var last = that.copy(null,null,{ fileName : "stx/core/pack/Err.hx", lineNumber : 57, className : "stx.core.pack.Err", methodName : "next"});
		var stack = [];
		while(stx_core_pack_OptionLift.is_defined(last.prev)) {
			stack.push(stx_core_use_UseOptionNano.fudge(last.prev));
			last = stx_core_use_UseOptionNano.fudge(last.prev);
		}
		var next = Lambda.fold(stack,function(next,memo) {
			return next.copy(null,stx_core_pack_Option.fromNullT(memo),{ fileName : "stx/core/pack/Err.hx", lineNumber : 64, className : "stx.core.pack.Err", methodName : "next"});
		},this);
		return next;
	}
	,head: function() {
		var _g = this.data;
		if(_g._hx_index == 0) {
			var _g1 = _g.v;
			if(_g1._hx_index == 0) {
				var v = _g1.v;
				return haxe_ds_Option.Some(v);
			} else {
				return haxe_ds_Option.None;
			}
		} else {
			return haxe_ds_Option.None;
		}
	}
	,fault: function() {
		return this.pos;
	}
	,toString: function() {
		var p = stx_core_pack_PositionLift.toStringClassMethodLine(stx_core_pack_Position.fromPos(this.pos));
		var e = Std.string(this.data);
		return "" + e + " at (" + p + ")";
	}
	,__class__: stx_core_pack_Err
	,__properties__: {get_uuid:"get_uuid"}
};
var stx_core_pack_FailCode = {};
stx_core_pack_FailCode._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_FailCode.fromString = function(str) {
	return stx_core_pack_FailCode._new(str);
};
var stx_core_pack_FailureSum = $hxEnums["stx.core.pack.FailureSum"] = { __ename__ : "stx.core.pack.FailureSum", __constructs__ : ["ERR_OF","ERR"]
	,ERR_OF: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.core.pack.FailureSum",toString:$estr}; },$_.__params__ = ["v"],$_)
	,ERR: ($_=function(spec) { return {_hx_index:1,spec:spec,__enum__:"stx.core.pack.FailureSum",toString:$estr}; },$_.__params__ = ["spec"],$_)
};
stx_core_pack_FailureSum.__empty_constructs__ = [];
var stx_core_pack_Failure = {};
stx_core_pack_Failure.__properties__ = {get_self:"get_self"};
stx_core_pack_Failure._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Failure.lift = function(self) {
	return stx_core_pack_Failure._new(self);
};
stx_core_pack_Failure.prj = function(this1) {
	return this1;
};
stx_core_pack_Failure.get_self = function(this1) {
	return stx_core_pack_Failure.lift(this1);
};
stx_core_pack_Failure.fold = function(this1,val,def) {
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		return val(v);
	case 1:
		var e = this1.spec;
		return def(e);
	}
};
var stx_core_pack_Fault = {};
stx_core_pack_Fault._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Fault.of = function(this1,data,code) {
	return new stx_core_pack_Err(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,stx_core_pack_FailureSum.ERR_OF(data)),haxe_ds_Option.None,this1);
};
stx_core_pack_Fault.empty = function(this1) {
	return new stx_core_pack_Err(haxe_ds_Option.None,haxe_ds_Option.None,this1);
};
stx_core_pack_Fault.any = function(this1,msg) {
	return new stx_core_pack_Err(stx_core_pack_Option.fromNullT(stx_core_pack_FailureSum.ERR(stx_core_pack_FailCode.fromString(msg))),null,this1);
};
stx_core_pack_Fault.failure = function(this1,failure) {
	return new stx_core_pack_Err(haxe_ds_Option.Some(failure),null,this1);
};
stx_core_pack_Fault.err = function(this1,code) {
	return new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_FailureSum.ERR(code)),null,this1);
};
var stx_core_pack_OptionLift = function() { };
$hxClasses["stx.core.pack.OptionLift"] = stx_core_pack_OptionLift;
stx_core_pack_OptionLift.__name__ = "stx.core.pack.OptionLift";
stx_core_pack_OptionLift.fold = function(self,ok,no) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return ok(t);
	case 1:
		return no();
	}
};
stx_core_pack_OptionLift.map = function(self,f) {
	return stx_core_pack_OptionLift.fold(self,function(t) {
		return haxe_ds_Option.Some(f(t));
	},function() {
		return haxe_ds_Option.None;
	});
};
stx_core_pack_OptionLift.flat_map = function(self,f) {
	var out = stx_core_pack_OptionLift.map(self,f);
	return stx_core_pack_Option.flatten(out);
};
stx_core_pack_OptionLift.or = function(self,thunk) {
	return stx_core_pack_OptionLift.fold(self,haxe_ds_Option.Some,thunk);
};
stx_core_pack_OptionLift.filter = function(self,fn) {
	return stx_core_pack_OptionLift.flat_map(self,function(v) {
		if(fn(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
stx_core_pack_OptionLift.def = function(self,thunk) {
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return thunk();
	}
};
stx_core_pack_OptionLift.defv = function(self,v) {
	return stx_core_pack_OptionLift.def(self,function() {
		return v;
	});
};
stx_core_pack_OptionLift.is_defined = function(self) {
	return stx_core_pack_OptionLift.fold(self,function(_) {
		return true;
	},function() {
		return false;
	});
};
stx_core_pack_OptionLift.iterator = function(self) {
	var done = false;
	return { hasNext : function() {
		if(!done) {
			return stx_core_pack_OptionLift.is_defined(self);
		} else {
			return false;
		}
	}, next : function() {
		done = true;
		return stx_core_pack_OptionLift.defv(self,null);
	}};
};
stx_core_pack_OptionLift.merge = function(self,that,fn) {
	switch(self._hx_index) {
	case 0:
		var _g = self.v;
		switch(that._hx_index) {
		case 0:
			var l = _g;
			var r = that.v;
			return haxe_ds_Option.Some(fn(l,r));
		case 1:
			var l = _g;
			return haxe_ds_Option.Some(l);
		}
		break;
	case 1:
		if(that._hx_index == 0) {
			var r = that.v;
			return haxe_ds_Option.Some(r);
		} else {
			return haxe_ds_Option.None;
		}
		break;
	}
};
stx_core_pack_OptionLift.toArray = function(self) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return [v];
	case 1:
		return [];
	}
};
stx_core_pack_OptionLift.prj = function(self) {
	return self;
};
var stx_core_pack_Option = {};
stx_core_pack_Option._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Option.fromNullT = function(v) {
	return stx_core_pack_Option.make(v);
};
stx_core_pack_Option.make = function(t) {
	if(t == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(t);
	}
};
stx_core_pack_Option.flatten = function(self) {
	var _g = stx_core_pack_OptionLift.prj(self);
	switch(_g._hx_index) {
	case 0:
		var next = _g.v;
		return next;
	case 1:
		return haxe_ds_Option.None;
	}
};
var stx_core_pack_OutcomeSum = $hxEnums["stx.core.pack.OutcomeSum"] = { __ename__ : "stx.core.pack.OutcomeSum", __constructs__ : ["Success","Failure"]
	,Success: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.core.pack.OutcomeSum",toString:$estr}; },$_.__params__ = ["t"],$_)
	,Failure: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.core.pack.OutcomeSum",toString:$estr}; },$_.__params__ = ["e"],$_)
};
stx_core_pack_OutcomeSum.__empty_constructs__ = [];
var stx_core_pack_OutcomeLift = function() { };
$hxClasses["stx.core.pack.OutcomeLift"] = stx_core_pack_OutcomeLift;
stx_core_pack_OutcomeLift.__name__ = "stx.core.pack.OutcomeLift";
stx_core_pack_OutcomeLift.map = function(self,fn) {
	return stx_core_pack_OutcomeLift.flat_map(self,function(x) {
		return stx_core_pack_OutcomeSum.Success(fn(x));
	});
};
stx_core_pack_OutcomeLift.flat_map = function(self,fn) {
	return stx_core_pack_Outcome.lift(stx_core_pack_OutcomeLift.fold(self,function(t) {
		return fn(t);
	},function(e) {
		return stx_core_pack_OutcomeSum.Failure(e);
	}));
};
stx_core_pack_OutcomeLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return er(e);
	}
};
stx_core_pack_OutcomeLift.fudge = function(self) {
	return stx_core_pack_OutcomeLift.fold(self,function(t) {
		return t;
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
stx_core_pack_OutcomeLift.elide = function(self) {
	return stx_core_pack_OutcomeLift.fold(self,function(t) {
		return stx_core_pack_OutcomeSum.Failure(t);
	},function(e) {
		return stx_core_pack_OutcomeSum.Success(e);
	});
};
var stx_core_pack_Outcome = {};
stx_core_pack_Outcome.__properties__ = {get_self:"get_self"};
stx_core_pack_Outcome._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Outcome.lift = function(self) {
	return stx_core_pack_Outcome._new(self);
};
stx_core_pack_Outcome.success = function(t) {
	return stx_core_pack_Outcome.lift(stx_core_pack_OutcomeSum.Success(t));
};
stx_core_pack_Outcome.failure = function(e) {
	return stx_core_pack_Outcome.lift(stx_core_pack_OutcomeSum.Failure(e));
};
stx_core_pack_Outcome.prj = function(this1) {
	return this1;
};
stx_core_pack_Outcome.get_self = function(this1) {
	return stx_core_pack_Outcome.lift(this1);
};
var stx_core_pack_PositionLift = function() { };
$hxClasses["stx.core.pack.PositionLift"] = stx_core_pack_PositionLift;
stx_core_pack_PositionLift.__name__ = "stx.core.pack.PositionLift";
stx_core_pack_PositionLift.toString = function(pos) {
	if(pos == null) {
		return ":pos ()";
	}
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	return ":pos (object :file_name " + fn + " :class_name " + cls + " :method_name " + fn + "  :line_number " + ln + ")";
};
stx_core_pack_PositionLift.clone = function(p) {
	return stx_core_pack_Position.make(p.fileName,p.className,p.methodName,p.lineNumber,p.customParams);
};
stx_core_pack_PositionLift.withFragmentName = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	return "" + cls + "." + fn;
};
stx_core_pack_PositionLift.toStringClassMethodLine = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	var class_method = stx_core_pack_PositionLift.withFragmentName(pos);
	return "(" + class_method + "@" + pos.lineNumber + ")";
};
stx_core_pack_PositionLift.withCustomParams = function(p,v) {
	p = stx_core_pack_PositionLift.clone(p);
	if(p.customParams == null) {
		p.customParams = [];
	}
	p.customParams.push(v);
	return p;
};
var stx_core_pack_Position = {};
stx_core_pack_Position._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Position.lift = function(pos) {
	return stx_core_pack_Position.fromPos(pos);
};
stx_core_pack_Position.make = function(fileName,className,methodName,lineNumber,customParams) {
	return { fileName : fileName, className : className, methodName : methodName, lineNumber : lineNumber, customParams : customParams};
};
stx_core_pack_Position.fromPos = function(pos) {
	return stx_core_pack_Position._new(pos);
};
stx_core_pack_Position.toString = function(this1) {
	return stx_core_pack_Position._.toStringClassMethodLine(this1);
};
stx_core_pack_Position.here = function(pos) {
	return pos;
};
var stx_core_pack_PrimitiveDef = $hxEnums["stx.core.pack.PrimitiveDef"] = { __ename__ : "stx.core.pack.PrimitiveDef", __constructs__ : ["PNull","PBool","PInt","PFloat","PString"]
	,PNull: {_hx_index:0,__enum__:"stx.core.pack.PrimitiveDef",toString:$estr}
	,PBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"stx.core.pack.PrimitiveDef",toString:$estr}; },$_.__params__ = ["b"],$_)
	,PInt: ($_=function(int) { return {_hx_index:2,int:int,__enum__:"stx.core.pack.PrimitiveDef",toString:$estr}; },$_.__params__ = ["int"],$_)
	,PFloat: ($_=function(fl) { return {_hx_index:3,fl:fl,__enum__:"stx.core.pack.PrimitiveDef",toString:$estr}; },$_.__params__ = ["fl"],$_)
	,PString: ($_=function(str) { return {_hx_index:4,str:str,__enum__:"stx.core.pack.PrimitiveDef",toString:$estr}; },$_.__params__ = ["str"],$_)
};
stx_core_pack_PrimitiveDef.__empty_constructs__ = [stx_core_pack_PrimitiveDef.PNull];
var stx_core_pack_Primitive = {};
stx_core_pack_Primitive.fromInt = function(i) {
	return stx_core_pack_PrimitiveDef.PInt(i);
};
stx_core_pack_Primitive.fromFloat = function(i) {
	return stx_core_pack_PrimitiveDef.PFloat(i);
};
stx_core_pack_Primitive.fromBool = function(i) {
	return stx_core_pack_PrimitiveDef.PBool(i);
};
stx_core_pack_Primitive.fromString = function(i) {
	return stx_core_pack_PrimitiveDef.PString(i);
};
stx_core_pack_Primitive.toAny = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return null;
	case 1:
		var b = this1.b;
		return b;
	case 2:
		var int = this1.int;
		return int;
	case 3:
		var fl = this1.fl;
		return fl;
	case 4:
		var str = this1.str;
		return str;
	}
};
stx_core_pack_Primitive.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return "null";
	case 1:
		var b = this1.b;
		return "" + (b == null ? "null" : "" + b);
	case 2:
		var int = this1.int;
		return "" + int;
	case 3:
		var fl = this1.fl;
		return "" + fl;
	case 4:
		var str = this1.str;
		return str;
	}
};
stx_core_pack_Primitive.prj = function(this1) {
	return this1;
};
stx_core_pack_Primitive.lt = function(l,r) {
	switch(l._hx_index) {
	case 1:
		if(l.b == false) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				var x = l;
				var y = r;
				return x._hx_index < y._hx_index;
			}
		} else if(r._hx_index == 1) {
			var _g = r.b;
			return false;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 2:
		if(r._hx_index == 2) {
			var int = l.int;
			var int0 = r.int;
			return int < int0;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 3:
		if(r._hx_index == 3) {
			var fl = l.fl;
			var fl0 = r.fl;
			return fl < fl0;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 4:
		if(r._hx_index == 4) {
			var str = l.str;
			var str0 = r.str;
			return str < str0;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	default:
		var y = r;
		var x = l;
		return x._hx_index < y._hx_index;
	}
};
stx_core_pack_Primitive.eq = function(l,r) {
	switch(l._hx_index) {
	case 0:
		if(r._hx_index == 0) {
			return true;
		} else {
			return false;
		}
		break;
	case 1:
		if(l.b) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else if(r._hx_index == 1) {
			if(r.b == false) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
		break;
	case 2:
		if(r._hx_index == 2) {
			var int = l.int;
			var int0 = r.int;
			return int == int0;
		} else {
			return false;
		}
		break;
	case 3:
		if(r._hx_index == 3) {
			var fl = l.fl;
			var fl0 = r.fl;
			return fl == fl0;
		} else {
			return false;
		}
		break;
	case 4:
		if(r._hx_index == 4) {
			var str = l.str;
			var str0 = r.str;
			return str == str0;
		} else {
			return false;
		}
		break;
	}
};
var stx_core_pack_Report = {};
stx_core_pack_Report._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Report.lift = function(self) {
	return stx_core_pack_Report._new(self);
};
stx_core_pack_Report.unit = function() {
	return stx_core_pack_Report._new(haxe_ds_Option.None);
};
stx_core_pack_Report.conf = function(e) {
	return stx_core_pack_Report._new(stx_core_use_UseNano.option(stx_core_pack_Wildcard.__,e));
};
stx_core_pack_Report.pure = function(e) {
	return stx_core_pack_Report._new(haxe_ds_Option.Some(e));
};
stx_core_pack_Report.crunch = function(this1) {
	if(this1._hx_index == 0) {
		var e = this1.v;
		throw haxe_Exception.thrown(e);
	}
};
stx_core_pack_Report.fromStdOption = function(opt) {
	var opt1 = opt;
	return stx_core_pack_Report._new(opt1);
};
stx_core_pack_Report.prj = function(this1) {
	return this1;
};
stx_core_pack_Report.defv = function(this1,error) {
	return stx_core_pack_OptionLift.defv(this1,error);
};
stx_core_pack_Report.merge = function(this1,that) {
	return stx_core_pack_Report.fromStdOption(stx_core_pack_OptionLift.merge(this1,stx_core_pack_Report.prj(that),function(lhs,rhs) {
		return lhs.next(rhs);
	}));
};
stx_core_pack_Report.errata = function(this1,fn) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		tmp = stx_core_pack_Option.fromNullT(fn(v));
		break;
	case 1:
		tmp = haxe_ds_Option.None;
		break;
	}
	return stx_core_pack_Report._new(tmp);
};
stx_core_pack_Report.ok = function(this1) {
	if(this1._hx_index == 1) {
		return true;
	} else {
		return false;
	}
};
var stx_core_pack_ResLift = function() { };
$hxClasses["stx.core.pack.ResLift"] = stx_core_pack_ResLift;
stx_core_pack_ResLift.__name__ = "stx.core.pack.ResLift";
stx_core_pack_ResLift.errata = function(self,fn) {
	return stx_core_pack_Res.lift(stx_core_pack_ResLift.fold(self,function(t) {
		return stx_core_use_UseNano.success(stx_core_pack_Wildcard.__,t);
	},function(e) {
		return stx_core_use_UseNano.failure(stx_core_pack_Wildcard.__,fn(e));
	}));
};
stx_core_pack_ResLift.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var _g = self.t;
		switch(that._hx_index) {
		case 0:
			var t = _g;
			var tt = that.t;
			return stx_core_pack_OutcomeSum.Success(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,t,tt));
		case 1:
			var e = that.e;
			return stx_core_pack_OutcomeSum.Failure(e);
		}
		break;
	case 1:
		var _g = self.e;
		if(that._hx_index == 1) {
			var e = _g;
			var ee = that.e;
			return stx_core_pack_OutcomeSum.Failure(e.next(ee));
		} else {
			var e = _g;
			return stx_core_pack_OutcomeSum.Failure(e);
		}
		break;
	}
};
stx_core_pack_ResLift.map = function(self,fn) {
	return stx_core_pack_ResLift.flat_map(self,function(x) {
		return stx_core_pack_OutcomeSum.Success(fn(x));
	});
};
stx_core_pack_ResLift.flat_map = function(self,fn) {
	return stx_core_pack_Res.lift(stx_core_pack_ResLift.fold(self,function(t) {
		return fn(t);
	},function(e) {
		return stx_core_pack_OutcomeSum.Failure(e);
	}));
};
stx_core_pack_ResLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return er(e);
	}
};
stx_core_pack_ResLift.fudge = function(self) {
	return stx_core_pack_ResLift.fold(self,function(t) {
		return t;
	},function(e) {
		throw haxe_Exception.thrown(e);
	});
};
stx_core_pack_ResLift.elide = function(self) {
	return stx_core_pack_ResLift.fold(self,function(t) {
		return stx_core_pack_OutcomeSum.Failure(t);
	},function(e) {
		return stx_core_pack_OutcomeSum.Success(e);
	});
};
var stx_core_pack_Res = {};
stx_core_pack_Res.__properties__ = {get_self:"get_self"};
stx_core_pack_Res._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Res.lift = function(self) {
	return stx_core_pack_Res._new(self);
};
stx_core_pack_Res.success = function(t) {
	return stx_core_pack_Res.lift(stx_core_pack_OutcomeSum.Success(t));
};
stx_core_pack_Res.failure = function(e) {
	return stx_core_pack_Res.lift(stx_core_pack_OutcomeSum.Failure(e));
};
stx_core_pack_Res.prj = function(this1) {
	return this1;
};
stx_core_pack_Res.get_self = function(this1) {
	return stx_core_pack_Res.lift(this1);
};
stx_core_pack_Res.fromOutcome = function(self) {
	var ocd = self;
	return stx_core_pack_Res.lift(ocd);
};
stx_core_pack_Res.toOutcome = function(this1) {
	return stx_core_pack_Outcome.lift(this1);
};
var stx_core_pack_Unique = {};
stx_core_pack_Unique.__properties__ = {get_self:"get_self"};
stx_core_pack_Unique._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Unique.lift = function(self) {
	return stx_core_pack_Unique._new(self);
};
stx_core_pack_Unique.pure = function(data) {
	return stx_core_pack_Unique.make(data,function() {
	});
};
stx_core_pack_Unique.make = function(data,rtid) {
	return stx_core_pack_Unique.lift({ data : data, rtid : rtid});
};
stx_core_pack_Unique.prj = function(this1) {
	return this1;
};
stx_core_pack_Unique.get_self = function(this1) {
	return stx_core_pack_Unique.lift(this1);
};
stx_core_pack_Unique.equals = function(this1,that) {
	return this1.rtid == $bind(that,that.rtid);
};
stx_core_pack_Unique.toT = function(this1) {
	return this1.data;
};
var stx_core_pack_VBlock = {};
stx_core_pack_VBlock.unit = function() {
	return function() {
	};
};
stx_core_pack_VBlock._new = function(self) {
	var this1 = self;
	return this1;
};
var stx_core_pack_Wildcard = $hxEnums["stx.core.pack.Wildcard"] = { __ename__ : "stx.core.pack.Wildcard", __constructs__ : ["__"]
	,__: {_hx_index:0,__enum__:"stx.core.pack.Wildcard",toString:$estr}
};
stx_core_pack_Wildcard.__empty_constructs__ = [stx_core_pack_Wildcard.__];
var stx_core_pack_Y = {};
stx_core_pack_Y.unit = function() {
	return function(fn) {
		return fn(fn);
	};
};
stx_core_pack_Y.pure = function(f) {
	return function(fn) {
		return f;
	};
};
stx_core_pack_Y._new = function(self) {
	var this1 = self;
	return this1;
};
stx_core_pack_Y.reply = function(this1) {
	return this1(this1);
};
var stx_core_type_CardSum = $hxEnums["stx.core.type.CardSum"] = { __ename__ : "stx.core.type.CardSum", __constructs__ : ["___"]
	,___: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.core.type.CardSum",toString:$estr}; },$_.__params__ = ["v"],$_)
};
stx_core_type_CardSum.__empty_constructs__ = [];
var stx_core_type_ChunkSum = $hxEnums["stx.core.type.ChunkSum"] = { __ename__ : "stx.core.type.ChunkSum", __constructs__ : ["Val","Tap","End"]
	,Val: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.core.type.ChunkSum",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Tap: {_hx_index:1,__enum__:"stx.core.type.ChunkSum",toString:$estr}
	,End: ($_=function(err) { return {_hx_index:2,err:err,__enum__:"stx.core.type.ChunkSum",toString:$estr}; },$_.__params__ = ["err"],$_)
};
stx_core_type_ChunkSum.__empty_constructs__ = [stx_core_type_ChunkSum.Tap];
var stx_core_type_RegexApi = function(source,option) {
	this.source = source;
	this.option = option;
};
$hxClasses["stx.core.type.RegexApi"] = stx_core_type_RegexApi;
stx_core_type_RegexApi.__name__ = "stx.core.type.RegexApi";
stx_core_type_RegexApi.prototype = {
	source: null
	,option: null
	,match: function(match) {
		return new stx_core_type_MatchApi(this.source,this.option,match);
	}
	,__class__: stx_core_type_RegexApi
};
var stx_core_type_MatchApi = function(source,option,target) {
	stx_core_type_RegexApi.call(this,source,option);
	this.target = target;
	this.state = new EReg(source,option);
	this.status = this.state.match(target);
};
$hxClasses["stx.core.type.MatchApi"] = stx_core_type_MatchApi;
stx_core_type_MatchApi.__name__ = "stx.core.type.MatchApi";
stx_core_type_MatchApi.__super__ = stx_core_type_RegexApi;
stx_core_type_MatchApi.prototype = $extend(stx_core_type_RegexApi.prototype,{
	target: null
	,status: null
	,state: null
	,__class__: stx_core_type_MatchApi
});
var stx_core_type_ParameterDef = $hxEnums["stx.core.type.ParameterDef"] = { __ename__ : "stx.core.type.ParameterDef", __constructs__ : ["Unbound","Bound"]
	,Unbound: ($_=function(k) { return {_hx_index:0,k:k,__enum__:"stx.core.type.ParameterDef",toString:$estr}; },$_.__params__ = ["k"],$_)
	,Bound: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.core.type.ParameterDef",toString:$estr}; },$_.__params__ = ["v"],$_)
};
stx_core_type_ParameterDef.__empty_constructs__ = [];
var stx_core_use_UseArrayNano = function() { };
$hxClasses["stx.core.use.UseArrayNano"] = stx_core_use_UseArrayNano;
stx_core_use_UseArrayNano.__name__ = "stx.core.use.UseArrayNano";
stx_core_use_UseArrayNano.cross = function(self,that) {
	return stx_lift_ArrayLift.cross_with(self,that,function(tI,tII) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
	});
};
stx_core_use_UseArrayNano.zip = function(self,that) {
	return stx_lift_ArrayLift.zip_with(self,that,function(tI,tII) {
		return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,tI,tII);
	});
};
var stx_core_use_UseNano = function() { };
$hxClasses["stx.core.use.UseNano"] = stx_core_use_UseNano;
stx_core_use_UseNano.__name__ = "stx.core.use.UseNano";
stx_core_use_UseNano.if_else = function(b,_if,_else) {
	if(b) {
		return _if();
	} else {
		return _else();
	}
};
stx_core_use_UseNano.here = function(wildcard,pos) {
	return pos;
};
stx_core_use_UseNano.test = function(wildcard,arr) {
	var runner = new haxe_unit_TestRunner();
	var t = $getIterator(arr);
	while(t.hasNext()) {
		var t1 = t.next();
		runner.add(t1);
	}
	runner.run();
};
stx_core_use_UseNano.uuid = function(v,value) {
	if(value == null) {
		value = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
	}
	var reg = new EReg("[xy]","g");
	return reg.map(value,function(reg) {
		var r = Math.random() * 16 | 0 | 0;
		var v = reg.matched(0) == "x" ? r : r & 3 | 8;
		return StringTools.hex(v);
	}).toLowerCase();
};
stx_core_use_UseNano.sep = function(_) {
	var out = "/";
	return out;
};
stx_core_use_UseNano.option = function(wildcard,v) {
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_core_use_UseNano.success = function(wildcard,t) {
	return stx_core_pack_Res.success(t);
};
stx_core_use_UseNano.failure = function(wildcard,e) {
	return stx_core_pack_Res.failure(e);
};
stx_core_use_UseNano.fault = function(wildcard,pos) {
	return stx_core_pack_Fault._new(pos);
};
stx_core_use_UseNano.couple = function(wildcard,tI,tII) {
	return function(fn) {
		fn(tI,tII);
	};
};
stx_core_use_UseNano.decouple = function(wildcard,fn) {
	return function(tp) {
		return stx_core_pack_CoupleLift.decouple(tp,fn);
	};
};
stx_core_use_UseNano.toCouple = function(self) {
	return self;
};
stx_core_use_UseNano.lbump = function(wildcard,tp) {
	return stx_core_pack_CoupleLift.decouple(tp,function(lhs,rhs) {
		return stx_core_pack_OptionLift.fold(lhs,function(l) {
			return haxe_ds_Option.Some(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,rhs));
		},function() {
			return haxe_ds_Option.None;
		});
	});
};
stx_core_use_UseNano.rbump = function(wildcard,tp) {
	return stx_core_pack_CoupleLift.decouple(tp,function(lhs,rhs) {
		return stx_core_pack_OptionLift.fold(rhs,function(r) {
			return haxe_ds_Option.Some(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,lhs,r));
		},function() {
			return haxe_ds_Option.None;
		});
	});
};
stx_core_use_UseNano.fromPos = function(pos) {
	return stx_core_pack_Position.fromPos(pos);
};
stx_core_use_UseNano.future = function(wildcard) {
	var trigger = new tink_core_FutureTrigger();
	var future = trigger;
	return stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,trigger,future);
};
stx_core_use_UseNano.tracer = function(v,pos) {
	return function(t) {
		haxe_Log.trace(t,{ fileName : "stx/core/use/UseNano.hx", lineNumber : 102, className : "stx.core.use.UseNano", methodName : "tracer", customParams : [pos]});
		return t;
	};
};
stx_core_use_UseNano.traced = function(v,pos) {
	var infos = pos;
	return function(d) {
		haxe_Log.trace(d,infos);
	};
};
stx_core_use_UseNano.through = function(__) {
	return function(v) {
		return v;
	};
};
stx_core_use_UseNano.command = function(__,fn) {
	return function(v) {
		fn(v);
		return v;
	};
};
stx_core_use_UseNano.perform = function(__,fn) {
	return function(v) {
		fn();
		return v;
	};
};
stx_core_use_UseNano.execute = function(__,fn) {
	return function(v) {
		var _g = fn();
		if(_g._hx_index == 0) {
			var e = _g.v;
			return stx_core_use_UseNano.failure(__,e);
		} else {
			return stx_core_use_UseNano.success(__,v);
		}
	};
};
stx_core_use_UseNano.left = function(__,tI) {
	return haxe_ds_Either.Left(tI);
};
stx_core_use_UseNano.right = function(__,tII) {
	return haxe_ds_Either.Right(tII);
};
stx_core_use_UseNano.fudge = function(future) {
	var result = haxe_ds_Option.None;
	var cancelled = false;
	future.handle(function(x) {
		cancelled = true;
		result = haxe_ds_Option.Some(x);
	});
	return result;
};
var stx_core_use_UseOptionNano = function() { };
$hxClasses["stx.core.use.UseOptionNano"] = stx_core_use_UseOptionNano;
stx_core_use_UseOptionNano.__name__ = "stx.core.use.UseOptionNano";
stx_core_use_UseOptionNano.zip = function(self,that) {
	if(self._hx_index == 0) {
		if(that._hx_index == 0) {
			var l = self.v;
			var r = that.v;
			return haxe_ds_Option.Some(stx_core_use_UseNano.couple(stx_core_pack_Wildcard.__,l,r));
		} else {
			return haxe_ds_Option.None;
		}
	} else {
		return haxe_ds_Option.None;
	}
};
stx_core_use_UseOptionNano.fudge = function(self,err) {
	err = stx_core_pack_OptionLift.defv(stx_core_pack_Option.make(err),new stx_core_pack_Err(haxe_ds_Option.Some(stx_core_pack_FailureSum.ERR("E_OptionForcedError")),null,stx_core_use_UseNano.fault(stx_core_pack_Wildcard.__,{ fileName : "stx/core/use/UseOptionNano.hx", lineNumber : 11, className : "stx.core.use.UseOptionNano", methodName : "fudge"})));
	if(self == null) {
		throw haxe_Exception.thrown(err);
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return v;
		case 1:
			throw haxe_Exception.thrown(err);
		}
	}
};
var stx_lift_ArrayLift = function() { };
$hxClasses["stx.lift.ArrayLift"] = stx_lift_ArrayLift;
stx_lift_ArrayLift.__name__ = "stx.lift.ArrayLift";
stx_lift_ArrayLift.flatten = function(arrs) {
	var res = [];
	var _g = 0;
	while(_g < arrs.length) {
		var arr = arrs[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var e = arr[_g1];
			++_g1;
			res.push(e);
		}
	}
	return res;
};
stx_lift_ArrayLift.interleave = function(alls) {
	var res = [];
	if(alls.length > 0) {
		var minLength = alls[0].length;
		var _g = 0;
		while(_g < alls.length) {
			var e = alls[_g];
			++_g;
			minLength = Math.min(minLength,e.length) | 0;
		}
		var length = minLength;
		var i = 0;
		while(i < length) {
			var _g = 0;
			while(_g < alls.length) {
				var arr = alls[_g];
				++_g;
				res.push(arr[i]);
			}
			++i;
		}
	}
	return res;
};
stx_lift_ArrayLift.is_defined = function(self) {
	return self.length > 0;
};
stx_lift_ArrayLift.cons = function(self,t) {
	var copy = stx_lift_ArrayLift.copy(self);
	copy.unshift(t);
	return copy;
};
stx_lift_ArrayLift.snoc = function(self,t) {
	var copy = stx_lift_ArrayLift.copy(self);
	copy.push(t);
	return copy;
};
stx_lift_ArrayLift.set = function(self,i,v) {
	var arr0 = self.slice();
	arr0[i] = v;
	return arr0;
};
stx_lift_ArrayLift.get = function(self,i) {
	return self[i];
};
stx_lift_ArrayLift.head = function(self) {
	if(self.length == 0) {
		return haxe_ds_Option.None;
	} else if(self[0] == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(self[0]);
	}
};
stx_lift_ArrayLift.tail = function(self) {
	return self.slice(1);
};
stx_lift_ArrayLift.last = function(self) {
	var v = self[self.length > 0 ? self.length - 1 : 0];
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_lift_ArrayLift.copy = function(self) {
	return [].concat(self);
};
stx_lift_ArrayLift.concat = function(self,that) {
	var acc = stx_lift_ArrayLift.copy(self);
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		acc.push(e);
	}
	return acc;
};
stx_lift_ArrayLift.bind_fold = function(self,pure,init,bind,fold) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		return bind(memo,function(b) {
			return pure(fold(next,b));
		});
	},pure(init));
};
stx_lift_ArrayLift.reduce = function(self,unit,pure,plus) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		return plus(memo,pure(next));
	},unit());
};
stx_lift_ArrayLift.map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		n.push(fn(e));
	}
	return n;
};
stx_lift_ArrayLift.mapi = function(self,fn) {
	var n = [];
	var e = null;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		e = self[i];
		n.push(fn(i,e));
	}
	return n;
};
stx_lift_ArrayLift.flat_map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e1 = self[_g];
		++_g;
		var e2 = $getIterator(fn(e1));
		while(e2.hasNext()) {
			var e21 = e2.next();
			n.push(e21);
		}
	}
	return n;
};
stx_lift_ArrayLift.lfold = function(self,fn,memo) {
	var r = memo;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		r = fn(e,r);
	}
	return r;
};
stx_lift_ArrayLift.lfold1 = function(self,fn) {
	var folded = stx_lift_ArrayLift.head(self);
	var tail = stx_lift_ArrayLift.tail(self);
	return stx_core_pack_OptionLift.map(folded,function(memo) {
		var _g = 0;
		while(_g < tail.length) {
			var item = tail[_g];
			++_g;
			memo = fn(memo,item);
		}
		return memo;
	});
};
stx_lift_ArrayLift.rfold = function(self,fn,z) {
	var r = z;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var e = self[self.length - 1 - i];
		r = fn(e,r);
	}
	return r;
};
stx_lift_ArrayLift.rfold1 = function(self,fn) {
	return stx_lift_ArrayLift.lfold1(stx_lift_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]),fn);
};
stx_lift_ArrayLift.lscan = function(self,f,init) {
	var accum = init;
	var result = [init];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		result.push(f(e,accum));
	}
	return result;
};
stx_lift_ArrayLift.lscan1 = function(self,f) {
	var result = [];
	if(0 == self.length) {
		return result;
	}
	var accum = self[0];
	result.push(accum);
	var _g = 1;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		result.push(f(self[i],accum));
	}
	return result;
};
stx_lift_ArrayLift.rscan = function(self,init,f) {
	var a = self.slice();
	a.reverse();
	return stx_lift_ArrayLift.lscan(a,f,init);
};
stx_lift_ArrayLift.rscan1 = function(self,f) {
	var a = self.slice();
	a.reverse();
	return stx_lift_ArrayLift.lscan1(a,f);
};
stx_lift_ArrayLift.filter = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			n.push(e);
		}
	}
	return n;
};
stx_lift_ArrayLift.map_filter = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		var _g = fn(next);
		if(_g._hx_index == 0) {
			var v = _g.v;
			return stx_lift_ArrayLift.snoc(memo,v);
		} else {
			return memo;
		}
	},[]);
};
stx_lift_ArrayLift.whilst = function(self,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			r.push(e);
		} else {
			break;
		}
	}
	return r;
};
stx_lift_ArrayLift.ltaken = function(self,n) {
	return self.slice(0,Math.min(n,self.length) | 0);
};
stx_lift_ArrayLift.ldropn = function(self,n) {
	if(n >= self.length) {
		return [];
	} else {
		return self.slice(n);
	}
};
stx_lift_ArrayLift.rdropn = function(self,n) {
	if(self != null && n >= self.length) {
		return [];
	} else {
		return self.splice(0,self.length - n);
	}
};
stx_lift_ArrayLift.ldrop = function(self,p) {
	var r = [].concat(self);
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(p(e)) {
			r.shift();
		} else {
			break;
		}
	}
	return r;
};
stx_lift_ArrayLift.search = function(self,fn) {
	var out = haxe_ds_Option.None;
	var _g = 0;
	while(_g < self.length) {
		var el = self[_g];
		++_g;
		if(fn(el)) {
			out = haxe_ds_Option.Some(el);
			break;
		}
	}
	return out;
};
stx_lift_ArrayLift.all = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return fn(b);
		} else {
			return false;
		}
	},true);
};
stx_lift_ArrayLift.any = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return true;
		} else {
			return fn(b);
		}
	},false);
};
stx_lift_ArrayLift.zip_with = function(self,that,fn) {
	var next = [];
	var lower = Math.min(self.length,that.length) | 0;
	var _g = 0;
	var _g1 = lower;
	while(_g < _g1) {
		var i = _g++;
		next.push(fn(self[i],that[i]));
	}
	return next;
};
stx_lift_ArrayLift.cross_with = function(self,that,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var va = self[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < that.length) {
			var vb = that[_g1];
			++_g1;
			r.push(fn(va,vb));
		}
	}
	return r;
};
stx_lift_ArrayLift.difference_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	while(_g < self.length) {
		var e = [self[_g]];
		++_g;
		if(!stx_lift_ArrayLift.any(that,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_lift_ArrayLift.union_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		res.push(e);
	}
	var _g = 0;
	while(_g < that.length) {
		var e = [that[_g]];
		++_g;
		if(!stx_lift_ArrayLift.any(res,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_lift_ArrayLift.unique_with = function(self,eq) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		var exists = stx_lift_ArrayLift.any(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		var val = stx_lift_ArrayLift.search(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		if(!exists) {
			r.push(e);
		}
	}
	return r;
};
stx_lift_ArrayLift.nub_with = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		var _g = f;
		var a1 = b;
		if(stx_lift_ArrayLift.any(a,function(a2) {
			return _g(a1,a2);
		})) {
			return a;
		} else {
			return stx_lift_ArrayLift.snoc(a,b);
		}
	},[]);
};
stx_lift_ArrayLift.intersect_with = function(self,that,f) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		var _g = f;
		var a1 = next;
		var _g1 = function(a2) {
			return _g(a1,a2);
		};
		if(stx_lift_ArrayLift.any(that,_g1) == true) {
			return stx_lift_ArrayLift.snoc(memo,next);
		} else {
			return memo;
		}
	},[]);
};
stx_lift_ArrayLift.reversed = function(self) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]);
};
stx_lift_ArrayLift.count = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		return a + (f(b) ? 1 : 0);
	},0);
};
stx_lift_ArrayLift.size = function(self) {
	return self.length;
};
stx_lift_ArrayLift.index_of = function(self,t) {
	var index = 0;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(t(e)) {
			return index;
		}
		++index;
	}
	return -1;
};
stx_lift_ArrayLift.has = function(self,obj) {
	var index = self.indexOf(obj);
	if(index == -1) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(index);
	}
};
stx_lift_ArrayLift.partition = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		if(f(next)) {
			memo.a.push(next);
		} else {
			memo.b.push(next);
		}
		return memo;
	},{ a : [], b : []});
};
stx_lift_ArrayLift.chunk = function(self,size) {
	var slices = [];
	var rest = 0;
	var _g = 0;
	while(_g < size.length) {
		var n = size[_g];
		++_g;
		var next = rest + n;
		var slice = self.slice(rest,next);
		slices.push(slice);
		rest = next;
	}
	return slices;
};
stx_lift_ArrayLift.pad = function(self,len,val) {
	var len0 = len - self.length;
	var arr0 = [];
	var _g = 0;
	var _g1 = len0;
	while(_g < _g1) {
		var i = _g++;
		arr0.push(val);
	}
	return self.concat(arr0);
};
stx_lift_ArrayLift.fill = function(self,def) {
	var result = new Array(self.length);
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var x = self[i];
		result[i] = x == null ? def : x;
	}
	return result;
};
stx_lift_ArrayLift.toIterable = function(self) {
	return self;
};
stx_lift_ArrayLift.toMap = function(self) {
	var mp = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < self.length) {
		var tp = self[_g];
		++_g;
		var val = tp();
		mp.h[val.a] = val.b;
	}
	return mp;
};
stx_lift_ArrayLift.random = function(self) {
	var len = self.length;
	var ind = Math.round(Math.random() * (len - 1));
	return self[ind];
};
stx_lift_ArrayLift.shuffle = function(self) {
	var res = [];
	var cp = self.slice();
	while(cp.length > 0) {
		var randArray = Math.floor(Math.random() * cp.length);
		res.push(cp.splice(randArray,1)[0]);
	}
	return res;
};
stx_lift_ArrayLift.and_with = function(self,that,eq) {
	return stx_lift_ArrayLift.lfold(stx_lift_ArrayLift.zip_with(self,that,function(l,r) {
		return { a : l, b : r};
	}),function(next,memo) {
		if(memo) {
			if(eq(next.a,next.b)) {
				return eq(next.a,next.b);
			} else {
				return false;
			}
		} else {
			return memo;
		}
	},true);
};
stx_lift_ArrayLift.rotate = function(self,num) {
	num %= self.length;
	var l = stx_lift_ArrayLift.ltaken(self,num);
	var r = stx_lift_ArrayLift.ldropn(self,num);
	if(num < 0) {
		return stx_lift_ArrayLift.concat(l,r);
	} else if(num > 1) {
		return stx_lift_ArrayLift.concat(l,r);
	} else {
		return self;
	}
};
stx_lift_ArrayLift.iterator = function(self) {
	return new haxe_iterators_ArrayIterator(self);
};
stx_lift_ArrayLift.elide = function(self) {
	return stx_lift_ArrayLift.map(self,function(v) {
		return v;
	});
};
stx_lift_ArrayLift.prj = function(self) {
	return self;
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
$hxClasses["tink.core.Annex"] = tink_core_Annex;
tink_core_Annex.__name__ = "tink.core.Annex";
tink_core_Annex.prototype = {
	target: null
	,registry: null
	,__class__: tink_core_Annex
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		var _e = this1;
		var _g = function(data) {
			tink_core_Callback.invoke(_e,data);
		};
		var data1 = data;
		tink_core_Callback.defer(function() {
			_g(data1);
		});
	}
};
tink_core_Callback.ignore = function(cb) {
	return function(_) {
		tink_core_Callback.invoke(cb,tink_core_Noise.Noise);
	};
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core_Callback.invoke(callback,v);
		}
	};
};
tink_core_Callback.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_core_LinkObject = function() { };
$hxClasses["tink.core.LinkObject"] = tink_core_LinkObject;
tink_core_LinkObject.__name__ = "tink.core.LinkObject";
tink_core_LinkObject.__isInterface__ = true;
tink_core_LinkObject.prototype = {
	cancel: null
	,__class__: tink_core_LinkObject
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	var this1 = new tink_core_SimpleLink(link);
	return this1;
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	return function(_) {
		this1.cancel();
	};
};
tink_core_CallbackLink.fromFunction = function(f) {
	var this1 = new tink_core_SimpleLink(f);
	return this1;
};
tink_core_CallbackLink.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	var this1 = new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
	return this1;
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
$hxClasses["tink.core.SimpleLink"] = tink_core_SimpleLink;
tink_core_SimpleLink.__name__ = "tink.core.SimpleLink";
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	f: null
	,cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
$hxClasses["tink.core._Callback.LinkPair"] = tink_core__$Callback_LinkPair;
tink_core__$Callback_LinkPair.__name__ = "tink.core._Callback.LinkPair";
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	a: null
	,b: null
	,dissolved: null
	,cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
$hxClasses["tink.core._Callback.ListCell"] = tink_core__$Callback_ListCell;
tink_core__$Callback_ListCell.__name__ = "tink.core._Callback.ListCell";
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	cb: null
	,list: null
	,invoke: function(data) {
		if(this.list != null) {
			tink_core_Callback.invoke(this.cb,data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used < list.used >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_CallbackList = function() {
	this.busy = false;
	this.queue = [];
	this.used = 0;
	this.cells = [];
};
$hxClasses["tink.core.CallbackList"] = tink_core_CallbackList;
tink_core_CallbackList.__name__ = "tink.core.CallbackList";
tink_core_CallbackList.prototype = {
	cells: null
	,used: null
	,queue: null
	,busy: null
	,ondrain: function() {
	}
	,get_length: function() {
		return this.used;
	}
	,release: function() {
		if(--this.used < this.used >> 1) {
			this.compact();
		}
	}
	,add: function(cb) {
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		this.used++;
		return node;
	}
	,invoke: function(data,destructive) {
		if(this.busy) {
			var _g = $bind(this,this.invoke);
			var data1 = data;
			var destructive1 = destructive;
			var tmp = function() {
				_g(data1,destructive1);
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			var length = this.cells.length;
			var _g1 = 0;
			var _g2 = length;
			while(_g1 < _g2) {
				var i = _g1++;
				var _this = this.cells[i];
				if(_this.list != null) {
					tink_core_Callback.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				var added = this.cells.length - length;
				var _g1 = 0;
				var _g2 = length;
				while(_g1 < _g2) {
					var i = _g1++;
					var _this = this.cells[i];
					_this.cb = null;
					_this.list = null;
				}
				var _g1 = 0;
				var _g2 = added;
				while(_g1 < _g2) {
					var i = _g1++;
					this.cells[i] = this.cells[length + i];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g3 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
	,__properties__: {get_length:"get_length"}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
$hxClasses["tink.core.TypedError"] = tink_core_TypedError;
tink_core_TypedError.__name__ = "tink.core.TypedError";
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		var _g = tink_core_TypedError.asError(e);
		var tmp;
		if(_g == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e,pos) : report(e);
		} else {
			var e = _g;
			tmp = e;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
	,printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		var any = this;
		throw haxe_Exception.thrown(any);
	}
	,__class__: tink_core_TypedError
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core_FutureObject = function() { };
$hxClasses["tink.core.FutureObject"] = tink_core_FutureObject;
tink_core_FutureObject.__name__ = "tink.core.FutureObject";
tink_core_FutureObject.__isInterface__ = true;
tink_core_FutureObject.prototype = {
	map: null
	,flatMap: null
	,handle: null
	,gather: null
	,eager: null
	,__class__: tink_core_FutureObject
};
var tink_core__$Future_NeverFuture = function() {
};
$hxClasses["tink.core._Future.NeverFuture"] = tink_core__$Future_NeverFuture;
tink_core__$Future_NeverFuture.__name__ = "tink.core._Future.NeverFuture";
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	map: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,flatMap: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,handle: function(callback) {
		return null;
	}
	,gather: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,eager: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : "tink.core.Noise", __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
tink_core_Noise.__empty_constructs__ = [tink_core_Noise.Noise];
var tink_core__$Lazy_LazyObject = function() { };
$hxClasses["tink.core._Lazy.LazyObject"] = tink_core__$Lazy_LazyObject;
tink_core__$Lazy_LazyObject.__name__ = "tink.core._Lazy.LazyObject";
tink_core__$Lazy_LazyObject.__isInterface__ = true;
tink_core__$Lazy_LazyObject.prototype = {
	get: null
	,map: null
	,flatMap: null
	,__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
$hxClasses["tink.core._Lazy.LazyConst"] = tink_core__$Lazy_LazyConst;
tink_core__$Lazy_LazyConst.__name__ = "tink.core._Lazy.LazyConst";
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	value: null
	,get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
$hxClasses["tink.core._Future.SyncFuture"] = tink_core__$Future_SyncFuture;
tink_core__$Future_SyncFuture.__name__ = "tink.core._Future.SyncFuture";
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	value: null
	,map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return f(_gthis.value.get()).handle($yield);
		});
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Future = {};
tink_core_Future._new = function(f) {
	var this1 = new tink_core__$Future_SuspendableFuture(f);
	return this1;
};
tink_core_Future.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this1 = l1;
		ret1.handle(function(_) {
			this1.cancel();
		});
	}
	if(l2 != null) {
		var this2 = l2;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	return ret1;
};
tink_core_Future.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core_Future.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(t) {
		var gather = false;
		if(gather == null) {
			gather = true;
		}
		var ret = other.map(function(a) {
			return merger(t,a);
		});
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.flatten = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		var inner = null;
		var outer = f.handle(function(second) {
			inner = second.handle($yield);
		});
		var this1 = new tink_core_SimpleLink(function() {
			if(inner != null) {
				inner.cancel();
			}
		});
		return new tink_core__$Callback_LinkPair(outer,this1);
	});
};
tink_core_Future.ofJsPromise = function(promise) {
	return tink_core_Future.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		}).catch(function(e) {
			cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 89, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
		});
	});
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) {
		var f = [futures[_g]];
		++_g;
		var gather1 = false;
		if(gather1 == null) {
			gather1 = true;
		}
		var ret1 = ret.flatMap((function(f) {
			return function(results) {
				var gather = false;
				if(gather == null) {
					gather = true;
				}
				var ret = f[0].map((function() {
					return function(result) {
						return results.concat([result]);
					};
				})());
				if(gather) {
					return ret.gather();
				} else {
					return ret;
				}
			};
		})(f));
		ret = gather1 ? ret1.gather() : ret1;
	}
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Future.fromMany = function(futures) {
	return tink_core_Future.ofMany(futures);
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return js_Boot.__implements(maybeFuture,tink_core_FutureObject);
};
tink_core_Future.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			f($yield);
			return null;
		});
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core_Callback.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	var gather = false;
	if(gather == null) {
		gather = true;
	}
	var ret = a.map(haxe_ds_Either.Left);
	var tmp = gather ? ret.gather() : ret;
	var gather = false;
	if(gather == null) {
		gather = true;
	}
	var ret = b.map(haxe_ds_Either.Right);
	return tink_core_Future.first(tmp,gather ? ret.gather() : ret);
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var ret = map(d).map(tink_core_Outcome.Success);
			return ret.gather();
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
	return ret.gather();
};
tink_core_Future._tryFailingMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
	return ret.gather();
};
tink_core_Future._tryMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
	return ret.gather();
};
tink_core_Future._flatMap = function(f,map) {
	var ret = f.flatMap(map);
	return ret.gather();
};
tink_core_Future._map = function(f,map) {
	var ret = f.map(map);
	return ret.gather();
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	return tink_core_Future.async(function(cb) {
		haxe_Timer.delay(function() {
			cb(value.get());
		},ms);
	});
};
var tink_core_FutureTrigger = function() {
	this.list = new tink_core_CallbackList();
};
$hxClasses["tink.core.FutureTrigger"] = tink_core_FutureTrigger;
tink_core_FutureTrigger.__name__ = "tink.core.FutureTrigger";
tink_core_FutureTrigger.__interfaces__ = [tink_core_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		return f.handle($yield);
	});
};
tink_core_FutureTrigger.prototype = {
	result: null
	,list: null
	,handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var node = new tink_core__$Callback_ListCell(callback,v);
			v.cells.push(node);
			v.used++;
			return node;
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				ret.trigger(f(v));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v) {
				f(v).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_JsPromiseTools = function() { };
$hxClasses["tink.core.JsPromiseTools"] = tink_core_JsPromiseTools;
tink_core_JsPromiseTools.__name__ = "tink.core.JsPromiseTools";
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.suspended = true;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList();
	this.callbacks.ondrain = function() {
		if(_gthis.callbacks != null) {
			_gthis.suspended = true;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
};
$hxClasses["tink.core._Future.SuspendableFuture"] = tink_core__$Future_SuspendableFuture;
tink_core__$Future_SuspendableFuture.__name__ = "tink.core._Future.SuspendableFuture";
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core_FutureObject];
tink_core__$Future_SuspendableFuture.prototype = {
	callbacks: null
	,result: null
	,suspended: null
	,link: null
	,wakeup: null
	,trigger: function(value) {
		var _g = this.callbacks;
		if(_g != null) {
			var list = _g;
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			list.invoke(value,true);
		}
	}
	,handle: function(callback) {
		var _g = this.callbacks;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var _this = this.callbacks;
			var node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			_this.used++;
			var ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				$yield(f(res));
			});
		});
	}
	,flatMap: function(f) {
		return tink_core_Future.flatten(this.map(f));
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		this.handle(tink_core_Callback.fromNiladic(function() {
		}));
		return this;
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_core_Lazy = {};
tink_core_Lazy.get = function(this1) {
	return this1.get();
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return this1.map(f);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
$hxClasses["tink.core._Lazy.LazyFunc"] = tink_core__$Lazy_LazyFunc;
tink_core__$Lazy_LazyFunc.__name__ = "tink.core._Lazy.LazyFunc";
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	f: null
	,result: null
	,get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get());
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get()).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
$hxClasses["tink.core.NamedWith"] = tink_core_NamedWith;
tink_core_NamedWith.__name__ = "tink.core.NamedWith";
tink_core_NamedWith.prototype = {
	name: null
	,value: null
	,__class__: tink_core_NamedWith
};
var tink_core_OptionTools = function() { };
$hxClasses["tink.core.OptionTools"] = tink_core_OptionTools;
tink_core_OptionTools.__name__ = "tink.core.OptionTools";
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return l.get();
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
$hxClasses["tink.core.OptionIter"] = tink_core_OptionIter;
tink_core_OptionIter.__name__ = "tink.core.OptionIter";
tink_core_OptionIter.prototype = {
	value: null
	,alive: null
	,hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : "tink.core.Outcome", __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
tink_core_Outcome.__empty_constructs__ = [];
var tink_core_OutcomeTools = function() { };
$hxClasses["tink.core.OutcomeTools"] = tink_core_OutcomeTools;
tink_core_OutcomeTools.__name__ = "tink.core.OutcomeTools";
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw haxe_Exception.thrown(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		var _g = outcome.failure;
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option._hx_index) {
	case 0:
		var value = option.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 48, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var _g = outcome.data;
		return outcome;
	case 1:
		var _g = outcome.failure;
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		var _g = outcome.failure;
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		var _g = outcome.data;
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		return f(v);
	case 1:
		var e = outcome.failure;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		return tink_core_Outcome.Failure(report(e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			var d = _g.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = _g.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f = o.failure;
		return tink_core_Outcome.Failure(f);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f1));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair.__properties__ = {get_b:"get_b",get_a:"get_a"};
tink_core_Pair._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
$hxClasses["tink.core.MPair"] = tink_core_MPair;
tink_core_MPair.__name__ = "tink.core.MPair";
tink_core_MPair.prototype = {
	a: null
	,b: null
	,__class__: tink_core_MPair
};
var tink_core_Progress = {};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	var value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	var signal = tink_core_Signal.trigger();
	var future = tink_core_Future.async(function(cb) {
		var progress = function(v,total) {
			switch(value._hx_index) {
			case 0:
				var current = value.v;
				if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
					var this1 = new tink_core_MPair(v,total);
					var pv = this1;
					value = tink_core_ProgressType.InProgress(pv);
					signal.handlers.invoke(pv);
				}
				break;
			case 1:
				var _g = value.v;
				break;
			}
		};
		var finish = function(v) {
			if(value._hx_index == 1) {
				var _g = value.v;
			} else {
				value = tink_core_ProgressType.Finished(v);
				cb(v);
			}
		};
		f(progress,finish);
	});
	return new tink_core_CompositeProgress(future,signal);
};
tink_core_Progress.asFuture = function(this1) {
	return this1;
};
tink_core_Progress.asPromise = function(p) {
	return p;
};
tink_core_Progress.promise = function(v) {
	return new tink_core_PromiseProgress(v);
};
tink_core_Progress.future = function(v) {
	return new tink_core_FutureProgress(v);
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.next(this1,f);
};
var tink_core_SignalObject = function() { };
$hxClasses["tink.core.SignalObject"] = tink_core_SignalObject;
tink_core_SignalObject.__name__ = "tink.core.SignalObject";
tink_core_SignalObject.__isInterface__ = true;
tink_core_SignalObject.prototype = {
	listen: null
	,__class__: tink_core_SignalObject
};
var tink_core_ProgressObject = function() { };
$hxClasses["tink.core.ProgressObject"] = tink_core_ProgressObject;
tink_core_ProgressObject.__name__ = "tink.core.ProgressObject";
tink_core_ProgressObject.__isInterface__ = true;
tink_core_ProgressObject.__interfaces__ = [tink_core_SignalObject,tink_core_FutureObject];
var tink_core_CompositeProgress = function(future,signal) {
	this.future = future;
	this.signal = signal;
};
$hxClasses["tink.core.CompositeProgress"] = tink_core_CompositeProgress;
tink_core_CompositeProgress.__name__ = "tink.core.CompositeProgress";
tink_core_CompositeProgress.__interfaces__ = [tink_core_ProgressObject];
tink_core_CompositeProgress.prototype = {
	future: null
	,signal: null
	,map: function(f) {
		var ret = this.future.map(f);
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.future.flatMap(f);
		return ret.gather();
	}
	,handle: function(callback) {
		return this.future.handle(callback);
	}
	,listen: function(callback) {
		return this.signal.listen(callback);
	}
	,gather: function() {
		return this.future.gather();
	}
	,eager: function() {
		return this.future.eager();
	}
	,__class__: tink_core_CompositeProgress
};
var tink_core_ProgressTrigger = function() {
	this.value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
	tink_core_CompositeProgress.call(this,this.futureTrigger = new tink_core_FutureTrigger(),this.signalTrigger = tink_core_Signal.trigger());
};
$hxClasses["tink.core.ProgressTrigger"] = tink_core_ProgressTrigger;
tink_core_ProgressTrigger.__name__ = "tink.core.ProgressTrigger";
tink_core_ProgressTrigger.__super__ = tink_core_CompositeProgress;
tink_core_ProgressTrigger.prototype = $extend(tink_core_CompositeProgress.prototype,{
	futureTrigger: null
	,signalTrigger: null
	,value: null
	,progress: function(v,total) {
		var _g = this.value;
		switch(_g._hx_index) {
		case 0:
			var current = _g.v;
			if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
				var this1 = new tink_core_MPair(v,total);
				var pv = this1;
				this.value = tink_core_ProgressType.InProgress(pv);
				this.signalTrigger.handlers.invoke(pv);
			}
			break;
		case 1:
			var _g1 = _g.v;
			break;
		}
	}
	,finish: function(v) {
		var _g = this.value;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
		} else {
			this.value = tink_core_ProgressType.Finished(v);
			this.futureTrigger.trigger(v);
		}
	}
	,asProgress: function() {
		return this;
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_FutureProgress = function(future) {
	var ret = future.flatMap(function(progress) {
		return progress;
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		future.handle(function(progress) {
			progress.listen(cb);
		});
	}));
};
$hxClasses["tink.core.FutureProgress"] = tink_core_FutureProgress;
tink_core_FutureProgress.__name__ = "tink.core.FutureProgress";
tink_core_FutureProgress.__super__ = tink_core_CompositeProgress;
tink_core_FutureProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_FutureProgress
});
var tink_core_PromiseProgress = function(promise) {
	var ret = promise.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var progress = o.data;
			return progress.map(tink_core_Outcome.Success);
		case 1:
			var e = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	});
	tink_core_CompositeProgress.call(this,ret.gather(),tink_core_Signal.generate(function(cb) {
		promise.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var progress = o.data;
				progress.listen(cb);
				break;
			case 1:
				var e = o.failure;
				break;
			}
		});
	}));
};
$hxClasses["tink.core.PromiseProgress"] = tink_core_PromiseProgress;
tink_core_PromiseProgress.__name__ = "tink.core.PromiseProgress";
tink_core_PromiseProgress.__super__ = tink_core_CompositeProgress;
tink_core_PromiseProgress.prototype = $extend(tink_core_CompositeProgress.prototype,{
	__class__: tink_core_PromiseProgress
});
var tink_core_ProgressValue = {};
tink_core_ProgressValue.__properties__ = {get_total:"get_total",get_value:"get_value"};
tink_core_ProgressValue._new = function(value,total) {
	var this1 = new tink_core_MPair(value,total);
	var this2 = this1;
	return this2;
};
tink_core_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(this1.a / v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_core_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else {
		var i = _g;
		if(s.length - i > dp) {
			return HxOverrides.substr(s,0,dp + i + 1) + "%";
		} else {
			var i = _g;
			return StringTools.rpad(s,"0",i + dp + 1) + "%";
		}
	}
};
var tink_core_ProgressType = $hxEnums["tink.core.ProgressType"] = { __ename__ : "tink.core.ProgressType", __constructs__ : ["InProgress","Finished"]
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
tink_core_ProgressType.__empty_constructs__ = [];
var tink_core_TotalTools = function() { };
$hxClasses["tink.core.TotalTools"] = tink_core_TotalTools;
tink_core_TotalTools.__name__ = "tink.core.TotalTools";
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			var t1 = a.v;
			var t2 = b.v;
			return t1 == t2;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var this1 = tink_core_Future.async(function(cb) {
		f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	},lazy);
	return this1;
};
tink_core_Promise.eager = function(this1) {
	return this1.eager();
};
tink_core_Promise.map = function(this1,f) {
	var ret = this1.map(f);
	return ret.gather();
};
tink_core_Promise.flatMap = function(this1,f) {
	var ret = this1.flatMap(f);
	return ret.gather();
};
tink_core_Promise.tryRecover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core_Promise.recover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core_Promise.mapError = function(this1,f) {
	var ret = this1.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
	return ret.gather();
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	return tink_core_Promise.next(this1,function(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	});
};
tink_core_Promise.isSuccess = function(this1) {
	var ret = this1.map(function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
	return ret.gather();
};
tink_core_Promise.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Future._tryMap(this1,function(_) {
		return v;
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core_Promise.next(this1,function(t) {
		return tink_core_Promise.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback,lazy) {
	return tink_core_Future.async(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									var ret = _g.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e = o.failure;
						cb(tink_core_Outcome.Failure(e));
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	},lazy);
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		return HxOverrides.now() / 1000 * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		};
		var ret = gen().flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				resolve(v);
				break;
			case 1:
				var e = o.failure;
				reject(new tink_core__$Promise_TinkError(e));
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.ofFuture = function(f) {
	var ret = f.map(tink_core_Outcome.Success);
	return ret.gather();
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.lazy = function(p) {
	return tink_core_Future.async(function(cb) {
		p.get().handle(cb);
	},true);
};
tink_core_Promise.inParallel = function(a,concurrency,lazy) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
	} else {
		return tink_core_Future.async(function(cb) {
			var result = [];
			var pending = a.length;
			var links = null;
			var linkArray = [];
			var sync = false;
			var i = 0;
			var iter_current;
			var iter_array;
			iter_current = 0;
			iter_array = a;
			var next = null;
			var done = function(o) {
				if(links == null) {
					sync = true;
				} else if(links != null) {
					links.cancel();
				}
				cb(o);
			};
			var fail = function(e) {
				pending = 0;
				done(tink_core_Outcome.Failure(e));
			};
			var set = function(index,value) {
				result[index] = value;
				if((pending -= 1) == 0) {
					done(tink_core_Outcome.Success(result));
				} else if(iter_current < iter_array.length && pending > 0) {
					next();
				}
			};
			next = function() {
				i += 1;
				var index = i - 1;
				iter_current += 1;
				linkArray.push(iter_array[iter_current - 1].handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						set(index,v);
						break;
					case 1:
						var e = o.failure;
						fail(e);
						break;
					}
				}));
			};
			while(true) {
				var tmp;
				if(iter_current < iter_array.length && pending > 0) {
					if(concurrency != null) {
						concurrency -= 1;
						tmp = concurrency + 1 > 0;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				next();
			}
			links = tink_core_CallbackLink.fromMany(linkArray);
			if(sync) {
				if(links != null) {
					links.cancel();
				}
			}
		},lazy);
	}
};
tink_core_Promise.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core_Promise.next(a[index],function(head) {
				return tink_core_Promise.next(loop(index + 1),function(tail) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
				});
			});
		}
	};
	return loop(0);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		var ret1 = ret.map(function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
		return ret1.gather();
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		var ret = f(x).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		var ret = f(x1,x2).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core__$Promise_TinkError = function(e) {
	Error.call(this,e.message);
	this.data = e;
};
$hxClasses["tink.core._Promise.TinkError"] = tink_core__$Promise_TinkError;
tink_core__$Promise_TinkError.__name__ = "tink.core._Promise.TinkError";
tink_core__$Promise_TinkError.__super__ = Error;
tink_core__$Promise_TinkError.prototype = $extend(Error.prototype,{
	data: null
	,__class__: tink_core__$Promise_TinkError
});
var tink_core_Ref = {};
tink_core_Ref.__properties__ = {set_value:"set_value",get_value:"get_value"};
tink_core_Ref._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
tink_core_Ref.get_value = function(this1) {
	return this1[0];
};
tink_core_Ref.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core_Ref.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f) {
	var this1 = new tink_core__$Signal_SimpleSignal(f);
	return this1;
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			tink_core_Callback.invoke(cb,f(result));
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			f(result).handle(cb);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			if(f(result)) {
				tink_core_Callback.invoke(cb,result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.select = function(this1,selector,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			var _g = selector(result);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				tink_core_Callback.invoke(cb,v);
				break;
			case 1:
				break;
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.listen(cb),other.listen(cb));
	});
	var ret = this2;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.listen(function(v) {
		if(condition == null || condition(v)) {
			ret.trigger(v);
			if(link == null) {
				immediate = true;
			} else if(link != null) {
				link.cancel();
			}
		}
	});
	if(immediate) {
		if(link != null) {
			link.cancel();
		}
	}
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	var ret = new tink_core__$Signal_Suspendable(function($yield) {
		var this2 = this1.listen($yield);
		if(this2 == null) {
			return tink_core_CallbackLink.noop;
		} else {
			return $bind(this2,this2.cancel);
		}
	});
	end.handle(tink_core_Callback.fromNiladic($bind(ret,ret.kill)));
	return ret;
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core_Signal.gather = function(this1) {
	var ret = tink_core_Signal.trigger();
	this1.listen(function(x) {
		ret.handlers.invoke(x);
	});
	return ret;
};
tink_core_Signal.generate = function(generator) {
	var ret = tink_core_Signal.trigger();
	generator($bind(ret,ret.trigger));
	return ret;
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.create = function(create) {
	return new tink_core__$Signal_Suspendable(create);
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			tink_core_Callback.invoke(cb,a);
		};
		add(f);
		var _g = remove;
		var a1 = f;
		var this1 = new tink_core_SimpleLink(function() {
			_g(a1);
		});
		return this1;
	});
	var ret = this1;
	if(gather) {
		return tink_core_Signal.gather(ret);
	} else {
		return ret;
	}
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
$hxClasses["tink.core._Signal.SimpleSignal"] = tink_core__$Signal_SimpleSignal;
tink_core__$Signal_SimpleSignal.__name__ = "tink.core._Signal.SimpleSignal";
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	f: null
	,listen: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var tink_core__$Signal_Suspendable = function(activate) {
	this.killed = false;
	this.trigger = new tink_core_SignalTrigger();
	this.activate = activate;
};
$hxClasses["tink.core._Signal.Suspendable"] = tink_core__$Signal_Suspendable;
tink_core__$Signal_Suspendable.__name__ = "tink.core._Signal.Suspendable";
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_Suspendable.prototype = {
	trigger: null
	,activate: null
	,suspend: null
	,check: null
	,killed: null
	,kill: function() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	,listen: function(cb) {
		var _gthis = this;
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.used == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var _this = this.trigger.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		var this1 = new tink_core_SimpleLink(function() {
			if(_gthis.trigger.handlers.used == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(node,this1);
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
$hxClasses["tink.core.SignalTrigger"] = tink_core_SignalTrigger;
tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger";
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	handlers: null
	,trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		return node;
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [{ name : "texpr", data : "QVJHLUVZCkJBUkc6OkVZCgphIGIgYwoKW2QgZSBmXQoKaCBbaSBqXQoKWwogIFtrIGwgbV0KXQoKbgpbb10KCltwIFtxXV0KClsKICBbciBbc11dCiAgW3QgdV0KXQoKWyJBIiAiQiIgIkMiXQoKRAoKWwogIEUgRgpdCgpbCiAgSCAxCiAgSSAyCiAgSiAzCiAgSyBbCiAgICBMICJNIiBOCiAgICBbTyAiUCIgUV0KICBdCl0KW10KCgpSIFsKICBTCl0K"},{ name : "simple_lang", data : "R3JhbW1hciBTaW1wbGVQYXJzZXIgWwogIFsicF9zdGFyX2lkIiAgWyBpZCBbIngiXSBdXQogIFsicF9wbHVzX2lkIiAgWyBpZCBbIisiXSBdXQogIFsicF9pbnQiICAgICAgWyBUYWdbIk51bSIgcmVnZXggWyJbMC05XSsiXV0gXV0KICBbInBfZXhwciIgICAgIFsgTWVtW1twX211bHQgcF9wbHVzIHBfaW50XV0gXV0KICBbInBfbXVsdCIgICAgIFsgVGFnWyJNdWx0IiBbcF9leHByIHBfc3Rhcl9pZCBwX2V4cHJdXSBdXQogIFsicF9wbHVzIiAgICAgWyBUYWdbIlBsdXMiIFtwX2V4cHIgcF9zdGFyX2lkIHBfZXhwcl1dIF1dCiAgWyJtYWluIiAgICAgICBbIHBfZXhwciBdXQpd"},{ name : "transformed", data : "Y2xhc3MgVGVzdENsYXNzWwogIFttZXRhIAogICAgW2V4dGVuZHMgamFsaS50ZXN0LlRyYW5zZm9ybWVyVGVzdC5CYXNlQ2xhc3NdCiAgXQogIFttZXRob2QgW2FyZyBhcmcxIGFyZzJdIFtwYXJzZVtoYXhlICJyZXR1cm4gJ2hlbGxvIHdvcmxkJyJdXV0KXQo"},{ name : "texpr_fails", data : "dGUgIHRl"},{ name : "texpr2", data : "UGFyc2VyLlNoZW5hbmlnYW5zIFsKICBbd2hpdGVzcGFjZSBCYXNlLndoaXRlc3BhY2VdCiAgW2FuZCBbIFtzcGFjZWQgW3hdXSBbbWFueSBbd2hpdGVzcGFjZSB4XV0gXSBdCiAgW2xfYnJja3QgWyBzcGFjZWQgWyAiWyIgXSBdXQogIFtyX2JyY2t0IFsgc3BhY2VkIFsgIl0iIF0gXV0KXQ"}];
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
EReg.escapeRe = new RegExp("[.*+?^${}()|[\\]\\\\]","g");
haxe_SysTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
StringTools.winMetaCharacters = haxe_SysTools.winMetaCharacters;
StringTools.MIN_SURROGATE_CODE_POINT = 65536;
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_crypto_Base64.URL_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
haxe_crypto_Base64.URL_BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.URL_CHARS);
stx_core__$Clause_Constructor.ZERO = new stx_core__$Clause_Constructor();
stx_core__$Clause_Constructor._ = new stx_core__$Clause_Destructure();
stx_core__$Declare_Constructor.ZERO = new stx_core__$Declare_Constructor();
stx_core__$ErrorCode_Constructor.ZERO = new stx_core__$ErrorCode_Constructor();
stx_core_LogicalClock.lifetime = 0;
stx_core_LogicalClock.counter = 0;
stx_core_chars_Constructor.ZERO = new stx_core_chars_Constructor();
stx_core_chars_Destructure.__meta__ = { fields : { underscore : { thx : null}}};
stx_core_chunk_Constructor.ZERO = new stx_core_chunk_Constructor();
stx_core_contract_Constructor.ZERO = new stx_core_contract_Constructor();
stx_core_iter_Constructor.ZERO = new stx_core_iter_Constructor();
stx_core_pack_Couple._ = stx_core_pack_CoupleLift;
stx_core_pack_Either._ = stx_core_pack_EitherLift;
stx_core_pack_Err.UUID = "e30e1389-4a72-41fe-ba9f-d7ddf3d1e247";
stx_core_pack_FailCode.E_ResourceNotFound = "E_ResourceNotFound";
stx_core_pack_FailCode.E_IteratorExhaustedUnexpectedly = "E_IteratorExhaustedUnexpectedly";
stx_core_pack_FailCode.E_UnexpectedNullValueEncountered = "E_UnexpectedNullValueEncountered";
stx_core_pack_FailCode.E_OptionForcedError = "E_OptionForcedError";
stx_core_pack_FailCode.E_ValueNotReady = "E_ValueNotReady";
stx_core_pack_FailCode.E_AbstractMethod = "E_AbstractMethod";
stx_core_pack_FailCode.E_IndexOutOfBounds = "E_IndexOutOfBounds";
stx_core_pack_Option._ = stx_core_pack_OptionLift;
stx_core_pack_Outcome._ = stx_core_pack_OutcomeLift;
stx_core_pack_Position.ZERO = stx_core_pack_Position.make(null,null,null,null);
stx_core_pack_Position._ = stx_core_pack_PositionLift;
stx_core_pack_Res._ = stx_core_pack_ResLift;
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core_Future.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core_Future.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_Lazy.NULL = new tink_core__$Lazy_LazyConst(null);
tink_core_Progress.INIT = (function($this) {
	var $r;
	var this1 = new tink_core_MPair(0.0,haxe_ds_Option.None);
	$r = this1;
	return $r;
}(this));
tink_core_Promise.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core_Promise.NEVER = (function($this) {
	var $r;
	var ret = tink_core_Future.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
